/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_RCFProto(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_RCFProto(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_RCFProto(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else



//#pragma warning(disable:4701) // warning C4701: potentially uninitialized local variable 'result' used
//#pragma warning(disable:4702) // warning C4702: unreachable code

  // Callback for setting a .NET error.
  typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char * errorMsg);
  CSharpExceptionCallback_t csExceptionCallback = NULL;

  extern "C" SWIGEXPORT
  void SWIGSTDCALL CustomExceptionRegisterCallback(CSharpExceptionCallback_t exceptionCallback) 
  {
    csExceptionCallback = exceptionCallback;
  }

  static void SWIG_CSharpSetPendingExceptionCustom(const char * errorMsg) 
  {
    csExceptionCallback(errorMsg);
  }

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* Callback for returning strings to C# without leaking memory */
typedef void * (SWIGSTDCALL* SWIG_CSharpWStringHelperCallback)(const wchar_t *);
static SWIG_CSharpWStringHelperCallback SWIG_csharp_wstring_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterWStringCallback_RCFProto(SWIG_CSharpWStringHelperCallback callback) {
  SWIG_csharp_wstring_callback = callback;
}

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */



#include <stdint.h>		// Use the C99 official header


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <string>


#include <string>


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include "RCFProto.hpp"

SWIGINTERN std::vector< RCF::TransportProtocol > *new_std_vector_Sl_RCF_TransportProtocol_Sg___SWIG_2(int capacity){
        std::vector< RCF::TransportProtocol >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< RCF::TransportProtocol >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN RCF::TransportProtocol std_vector_Sl_RCF_TransportProtocol_Sg__getitemcopy(std::vector< RCF::TransportProtocol > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< enum RCF::TransportProtocol >::const_reference std_vector_Sl_RCF_TransportProtocol_Sg__getitem(std::vector< RCF::TransportProtocol > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_RCF_TransportProtocol_Sg__setitem(std::vector< RCF::TransportProtocol > *self,int index,RCF::TransportProtocol const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_RCF_TransportProtocol_Sg__AddRange(std::vector< RCF::TransportProtocol > *self,std::vector< RCF::TransportProtocol > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< RCF::TransportProtocol > *std_vector_Sl_RCF_TransportProtocol_Sg__GetRange(std::vector< RCF::TransportProtocol > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< RCF::TransportProtocol >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_RCF_TransportProtocol_Sg__Insert(std::vector< RCF::TransportProtocol > *self,int index,RCF::TransportProtocol const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_RCF_TransportProtocol_Sg__InsertRange(std::vector< RCF::TransportProtocol > *self,int index,std::vector< RCF::TransportProtocol > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_RCF_TransportProtocol_Sg__RemoveAt(std::vector< RCF::TransportProtocol > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_RCF_TransportProtocol_Sg__RemoveRange(std::vector< RCF::TransportProtocol > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< RCF::TransportProtocol > *std_vector_Sl_RCF_TransportProtocol_Sg__Repeat(RCF::TransportProtocol const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< RCF::TransportProtocol >(count, value);
      }
SWIGINTERN void std_vector_Sl_RCF_TransportProtocol_Sg__Reverse__SWIG_0(std::vector< RCF::TransportProtocol > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_RCF_TransportProtocol_Sg__Reverse__SWIG_1(std::vector< RCF::TransportProtocol > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_RCF_TransportProtocol_Sg__SetRange(std::vector< RCF::TransportProtocol > *self,int index,std::vector< RCF::TransportProtocol > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "RCFProto_NET_impl.h"

SwigDirector__SwigCallback::SwigDirector__SwigCallback() : RCF::_SwigCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector__SwigCallback::~SwigDirector__SwigCallback() {
  
}


void SwigDirector__SwigCallback::Run() {
  if (!swig_callbackRun) {
    RCF::_SwigCallback::Run();
    return;
  } else {
    swig_callbackRun();
  }
}

void SwigDirector__SwigCallback::ProtoRpcBegin(RCF::_SwigCallbackArgs *args, RCF::RcfProtoServer *server, RCF::RcfProtoSession *context, std::string const &serviceName, int methodId) {
  void * jargs = 0 ;
  void * jserver = 0 ;
  void * jcontext = 0 ;
  char * jserviceName = 0 ;
  int jmethodId  ;
  
  if (!swig_callbackProtoRpcBegin) {
    RCF::_SwigCallback::ProtoRpcBegin(args,server,context,serviceName,methodId);
    return;
  } else {
    jargs = (void *) args; 
    jserver = (void *) server; 
    jcontext = (void *) context; 
    jserviceName = SWIG_csharp_string_callback((&serviceName)->c_str()); 
    jmethodId = methodId;
    swig_callbackProtoRpcBegin(jargs, jserver, jcontext, jserviceName, jmethodId);
  }
}

bool SwigDirector__SwigCallback::ValidateCertificate(RCF::_SwigCallbackArgs *args) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jargs = 0 ;
  
  if (!swig_callbackValidateCertificate) {
    return RCF::_SwigCallback::ValidateCertificate(args);
  } else {
    jargs = (void *) args; 
    jresult = (unsigned int) swig_callbackValidateCertificate(jargs);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector__SwigCallback::swig_connect_director(SWIG_Callback0_t callbackRun, SWIG_Callback1_t callbackProtoRpcBegin, SWIG_Callback2_t callbackValidateCertificate) {
  swig_callbackRun = callbackRun;
  swig_callbackProtoRpcBegin = callbackProtoRpcBegin;
  swig_callbackValidateCertificate = callbackValidateCertificate;
}

void SwigDirector__SwigCallback::swig_init_callbacks() {
  swig_callbackRun = 0;
  swig_callbackProtoRpcBegin = 0;
  swig_callbackValidateCertificate = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_TransportProtocolList_Clear(void * jarg1) {
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  
  arg1 = (std::vector< RCF::TransportProtocol > *)jarg1; 
  {
    try 
    {
      (arg1)->clear();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportProtocolList_Add(void * jarg1, int jarg2) {
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  RCF::TransportProtocol *arg2 = 0 ;
  RCF::TransportProtocol temp2 ;
  
  arg1 = (std::vector< RCF::TransportProtocol > *)jarg1; 
  temp2 = (RCF::TransportProtocol)jarg2; 
  arg2 = &temp2; 
  {
    try 
    {
      (arg1)->push_back((RCF::TransportProtocol const &)*arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TransportProtocolList_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  std::vector< enum RCF::TransportProtocol >::size_type result;
  
  arg1 = (std::vector< RCF::TransportProtocol > *)jarg1; 
  {
    try 
    {
      result = ((std::vector< RCF::TransportProtocol > const *)arg1)->size();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TransportProtocolList_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  std::vector< enum RCF::TransportProtocol >::size_type result;
  
  arg1 = (std::vector< RCF::TransportProtocol > *)jarg1; 
  {
    try 
    {
      result = ((std::vector< RCF::TransportProtocol > const *)arg1)->capacity();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportProtocolList_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  std::vector< enum RCF::TransportProtocol >::size_type arg2 ;
  
  arg1 = (std::vector< RCF::TransportProtocol > *)jarg1; 
  arg2 = (std::vector< enum RCF::TransportProtocol >::size_type)jarg2; 
  {
    try 
    {
      (arg1)->reserve(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TransportProtocolList__SWIG_0() {
  void * jresult ;
  std::vector< RCF::TransportProtocol > *result = 0 ;
  
  {
    try 
    {
      result = (std::vector< RCF::TransportProtocol > *)new std::vector< RCF::TransportProtocol >();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TransportProtocolList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< RCF::TransportProtocol > *arg1 = 0 ;
  std::vector< RCF::TransportProtocol > *result = 0 ;
  
  arg1 = (std::vector< RCF::TransportProtocol > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< RCF::TransportProtocol > const & type is null", 0);
    return 0;
  } 
  {
    try 
    {
      result = (std::vector< RCF::TransportProtocol > *)new std::vector< RCF::TransportProtocol >((std::vector< RCF::TransportProtocol > const &)*arg1);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TransportProtocolList__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< RCF::TransportProtocol > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try 
    {
      try {
        result = (std::vector< RCF::TransportProtocol > *)new_std_vector_Sl_RCF_TransportProtocol_Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TransportProtocolList_getitemcopy(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  int arg2 ;
  RCF::TransportProtocol result;
  
  arg1 = (std::vector< RCF::TransportProtocol > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try 
    {
      try {
        result = (RCF::TransportProtocol)std_vector_Sl_RCF_TransportProtocol_Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TransportProtocolList_getitem(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  int arg2 ;
  RCF::TransportProtocol *result = 0 ;
  
  arg1 = (std::vector< RCF::TransportProtocol > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try 
    {
      try {
        result = (RCF::TransportProtocol *) &std_vector_Sl_RCF_TransportProtocol_Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportProtocolList_setitem(void * jarg1, int jarg2, int jarg3) {
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  int arg2 ;
  RCF::TransportProtocol *arg3 = 0 ;
  RCF::TransportProtocol temp3 ;
  
  arg1 = (std::vector< RCF::TransportProtocol > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (RCF::TransportProtocol)jarg3; 
  arg3 = &temp3; 
  {
    try 
    {
      try {
        std_vector_Sl_RCF_TransportProtocol_Sg__setitem(arg1,arg2,(enum RCF::TransportProtocol const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportProtocolList_AddRange(void * jarg1, void * jarg2) {
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  std::vector< RCF::TransportProtocol > *arg2 = 0 ;
  
  arg1 = (std::vector< RCF::TransportProtocol > *)jarg1; 
  arg2 = (std::vector< RCF::TransportProtocol > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< RCF::TransportProtocol > const & type is null", 0);
    return ;
  } 
  {
    try 
    {
      std_vector_Sl_RCF_TransportProtocol_Sg__AddRange(arg1,(std::vector< enum RCF::TransportProtocol > const &)*arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TransportProtocolList_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< RCF::TransportProtocol > *result = 0 ;
  
  arg1 = (std::vector< RCF::TransportProtocol > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try 
    {
      try {
        result = (std::vector< RCF::TransportProtocol > *)std_vector_Sl_RCF_TransportProtocol_Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportProtocolList_Insert(void * jarg1, int jarg2, int jarg3) {
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  int arg2 ;
  RCF::TransportProtocol *arg3 = 0 ;
  RCF::TransportProtocol temp3 ;
  
  arg1 = (std::vector< RCF::TransportProtocol > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (RCF::TransportProtocol)jarg3; 
  arg3 = &temp3; 
  {
    try 
    {
      try {
        std_vector_Sl_RCF_TransportProtocol_Sg__Insert(arg1,arg2,(enum RCF::TransportProtocol const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportProtocolList_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  int arg2 ;
  std::vector< RCF::TransportProtocol > *arg3 = 0 ;
  
  arg1 = (std::vector< RCF::TransportProtocol > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< RCF::TransportProtocol > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< RCF::TransportProtocol > const & type is null", 0);
    return ;
  } 
  {
    try 
    {
      try {
        std_vector_Sl_RCF_TransportProtocol_Sg__InsertRange(arg1,arg2,(std::vector< enum RCF::TransportProtocol > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportProtocolList_RemoveAt(void * jarg1, int jarg2) {
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< RCF::TransportProtocol > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try 
    {
      try {
        std_vector_Sl_RCF_TransportProtocol_Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportProtocolList_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< RCF::TransportProtocol > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try 
    {
      try {
        std_vector_Sl_RCF_TransportProtocol_Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TransportProtocolList_Repeat(int jarg1, int jarg2) {
  void * jresult ;
  RCF::TransportProtocol *arg1 = 0 ;
  int arg2 ;
  RCF::TransportProtocol temp1 ;
  std::vector< RCF::TransportProtocol > *result = 0 ;
  
  temp1 = (RCF::TransportProtocol)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  {
    try 
    {
      try {
        result = (std::vector< RCF::TransportProtocol > *)std_vector_Sl_RCF_TransportProtocol_Sg__Repeat((enum RCF::TransportProtocol const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportProtocolList_Reverse__SWIG_0(void * jarg1) {
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  
  arg1 = (std::vector< RCF::TransportProtocol > *)jarg1; 
  {
    try 
    {
      std_vector_Sl_RCF_TransportProtocol_Sg__Reverse__SWIG_0(arg1);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportProtocolList_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< RCF::TransportProtocol > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try 
    {
      try {
        std_vector_Sl_RCF_TransportProtocol_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportProtocolList_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  int arg2 ;
  std::vector< RCF::TransportProtocol > *arg3 = 0 ;
  
  arg1 = (std::vector< RCF::TransportProtocol > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< RCF::TransportProtocol > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< RCF::TransportProtocol > const & type is null", 0);
    return ;
  } 
  {
    try 
    {
      try {
        std_vector_Sl_RCF_TransportProtocol_Sg__SetRange(arg1,arg2,(std::vector< enum RCF::TransportProtocol > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TransportProtocolList(void * jarg1) {
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  
  arg1 = (std::vector< RCF::TransportProtocol > *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_init() {
  {
    try 
    {
      RCF::init();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_deinit() {
  {
    try 
    {
      RCF::deinit();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isProBuild() {
  unsigned int jresult ;
  bool result;
  
  {
    try 
    {
      result = (bool)RCF::isProBuild();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LogTarget(void * jarg1) {
  RCF::LogTarget *arg1 = (RCF::LogTarget *) 0 ;
  
  arg1 = (RCF::LogTarget *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LogToStdout() {
  void * jresult ;
  RCF::LogToStdout *result = 0 ;
  
  {
    try 
    {
      result = (RCF::LogToStdout *)new RCF::LogToStdout();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LogToStdout(void * jarg1) {
  RCF::LogToStdout *arg1 = (RCF::LogToStdout *) 0 ;
  
  arg1 = (RCF::LogToStdout *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LogToDebugWindow() {
  void * jresult ;
  RCF::LogToDebugWindow *result = 0 ;
  
  {
    try 
    {
      result = (RCF::LogToDebugWindow *)new RCF::LogToDebugWindow();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LogToDebugWindow(void * jarg1) {
  RCF::LogToDebugWindow *arg1 = (RCF::LogToDebugWindow *) 0 ;
  
  arg1 = (RCF::LogToDebugWindow *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LogToEventLog(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  RCF::LogToEventLog *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  {
    try 
    {
      result = (RCF::LogToEventLog *)new RCF::LogToEventLog((std::string const &)*arg1,arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LogToEventLog(void * jarg1) {
  RCF::LogToEventLog *arg1 = (RCF::LogToEventLog *) 0 ;
  
  arg1 = (RCF::LogToEventLog *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LogToFile(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  RCF::LogToFile *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  {
    try 
    {
      result = (RCF::LogToFile *)new RCF::LogToFile((std::string const &)*arg1,arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LogToFile(void * jarg1) {
  RCF::LogToFile *arg1 = (RCF::LogToFile *) 0 ;
  
  arg1 = (RCF::LogToFile *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_enableLogging(void * jarg1, int jarg2, char * jarg3) {
  RCF::LogTarget *arg1 = 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (RCF::LogTarget *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RCF::LogTarget const & type is null", 0);
    return ;
  } 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try 
    {
      RCF::enableLogging((RCF::LogTarget const &)*arg1,arg2,(std::string const &)*arg3);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_disableLogging() {
  {
    try 
    {
      RCF::disableLogging();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_Certificate__getType(void * jarg1) {
  int jresult ;
  RCF::Certificate *arg1 = (RCF::Certificate *) 0 ;
  boost::shared_ptr< RCF::Certificate > *smartarg1 = 0 ;
  RCF::CertificateImplementationType result;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::Certificate > *)jarg1;
  arg1 = (RCF::Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = (RCF::CertificateImplementationType)(arg1)->_getType();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Certificate__downcastToWin32Certificate(void * jarg1, void * jarg2) {
  void * jresult ;
  RCF::Certificate *arg1 = (RCF::Certificate *) 0 ;
  RCF::CertificatePtr arg2 ;
  boost::shared_ptr< RCF::Certificate > *smartarg1 = 0 ;
  RCF::Win32CertificatePtr result;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::Certificate > *)jarg1;
  arg1 = (RCF::Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(RCF::CertificatePtr *)jarg2; 
  {
    try 
    {
      result = (arg1)->_downcastToWin32Certificate(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result ? new RCF::Win32CertificatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Certificate__downcastToX509Certificate(void * jarg1, void * jarg2) {
  void * jresult ;
  RCF::Certificate *arg1 = (RCF::Certificate *) 0 ;
  RCF::CertificatePtr arg2 ;
  boost::shared_ptr< RCF::Certificate > *smartarg1 = 0 ;
  RCF::X509CertificatePtr result;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::Certificate > *)jarg1;
  arg1 = (RCF::Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(RCF::CertificatePtr *)jarg2; 
  {
    try 
    {
      result = (arg1)->_downcastToX509Certificate(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result ? new RCF::X509CertificatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Certificate(void * jarg1) {
  RCF::Certificate *arg1 = (RCF::Certificate *) 0 ;
  boost::shared_ptr< RCF::Certificate > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::Certificate > *)jarg1;
  arg1 = (RCF::Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      (void)arg1; delete smartarg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PemCertificate__SWIG_0(char * jarg1, char * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  RCF::PemCertificate *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try 
    {
      result = (RCF::PemCertificate *)new RCF::PemCertificate((std::string const &)*arg1,(std::string const &)*arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  
  jresult = result ? new boost::shared_ptr<  RCF::PemCertificate >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PemCertificate__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  RCF::PemCertificate *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try 
    {
      result = (RCF::PemCertificate *)new RCF::PemCertificate((std::string const &)*arg1);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  
  jresult = result ? new boost::shared_ptr<  RCF::PemCertificate >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PemCertificate(void * jarg1) {
  RCF::PemCertificate *arg1 = (RCF::PemCertificate *) 0 ;
  boost::shared_ptr< RCF::PemCertificate > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::PemCertificate > *)jarg1;
  arg1 = (RCF::PemCertificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      (void)arg1; delete smartarg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_X509Certificate__getType(void * jarg1) {
  int jresult ;
  RCF::X509Certificate *arg1 = (RCF::X509Certificate *) 0 ;
  boost::shared_ptr< RCF::X509Certificate > *smartarg1 = 0 ;
  RCF::CertificateImplementationType result;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::X509Certificate > *)jarg1;
  arg1 = (RCF::X509Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = (RCF::CertificateImplementationType)(arg1)->_getType();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_X509Certificate_getCertificateName(void * jarg1) {
  char * jresult ;
  RCF::X509Certificate *arg1 = (RCF::X509Certificate *) 0 ;
  boost::shared_ptr< RCF::X509Certificate > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::X509Certificate > *)jarg1;
  arg1 = (RCF::X509Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = (arg1)->getCertificateName();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_X509Certificate_getIssuerName(void * jarg1) {
  char * jresult ;
  RCF::X509Certificate *arg1 = (RCF::X509Certificate *) 0 ;
  boost::shared_ptr< RCF::X509Certificate > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::X509Certificate > *)jarg1;
  arg1 = (RCF::X509Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = (arg1)->getIssuerName();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_X509Certificate(void * jarg1) {
  RCF::X509Certificate *arg1 = (RCF::X509Certificate *) 0 ;
  boost::shared_ptr< RCF::X509Certificate > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::X509Certificate > *)jarg1;
  arg1 = (RCF::X509Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      (void)arg1; delete smartarg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_Win32Certificate__getType(void * jarg1) {
  int jresult ;
  RCF::Win32Certificate *arg1 = (RCF::Win32Certificate *) 0 ;
  boost::shared_ptr< RCF::Win32Certificate > *smartarg1 = 0 ;
  RCF::CertificateImplementationType result;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::Win32Certificate > *)jarg1;
  arg1 = (RCF::Win32Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = (RCF::CertificateImplementationType)(arg1)->_getType();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Win32Certificate_getCertificateName(void * jarg1) {
  void * jresult ;
  RCF::Win32Certificate *arg1 = (RCF::Win32Certificate *) 0 ;
  boost::shared_ptr< RCF::Win32Certificate > *smartarg1 = 0 ;
  RCF::tstring result;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::Win32Certificate > *)jarg1;
  arg1 = (RCF::Win32Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = (arg1)->getCertificateName();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Win32Certificate_getIssuerName(void * jarg1) {
  void * jresult ;
  RCF::Win32Certificate *arg1 = (RCF::Win32Certificate *) 0 ;
  boost::shared_ptr< RCF::Win32Certificate > *smartarg1 = 0 ;
  RCF::tstring result;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::Win32Certificate > *)jarg1;
  arg1 = (RCF::Win32Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = (arg1)->getIssuerName();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Win32Certificate_exportToPfx(void * jarg1, char * jarg2) {
  RCF::Win32Certificate *arg1 = (RCF::Win32Certificate *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RCF::Win32Certificate > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::Win32Certificate > *)jarg1;
  arg1 = (RCF::Win32Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try 
    {
      (arg1)->exportToPfx((std::string const &)*arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Win32Certificate_findRootCertificate(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  RCF::Win32Certificate *arg1 = (RCF::Win32Certificate *) 0 ;
  RCF::Win32CertificateLocation arg2 ;
  RCF::Win32CertificateStore arg3 ;
  boost::shared_ptr< RCF::Win32Certificate > *smartarg1 = 0 ;
  RCF::Win32CertificatePtr result;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::Win32Certificate > *)jarg1;
  arg1 = (RCF::Win32Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (RCF::Win32CertificateLocation)jarg2; 
  arg3 = (RCF::Win32CertificateStore)jarg3; 
  {
    try 
    {
      result = (arg1)->findRootCertificate(arg2,arg3);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result ? new RCF::Win32CertificatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Win32Certificate(void * jarg1) {
  RCF::Win32Certificate *arg1 = (RCF::Win32Certificate *) 0 ;
  boost::shared_ptr< RCF::Win32Certificate > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::Win32Certificate > *)jarg1;
  arg1 = (RCF::Win32Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      (void)arg1; delete smartarg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PfxCertificate(char * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  RCF::tstring *arg2 = 0 ;
  RCF::tstring *arg3 = 0 ;
  RCF::PfxCertificate *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null wstring", 0);
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null wstring", 0);
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try 
    {
      result = (RCF::PfxCertificate *)new RCF::PfxCertificate((std::string const &)*arg1,(RCF::tstring const &)*arg2,(RCF::tstring const &)*arg3);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  
  jresult = result ? new boost::shared_ptr<  RCF::PfxCertificate >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PfxCertificate_addToStore(void * jarg1, int jarg2, int jarg3) {
  RCF::PfxCertificate *arg1 = (RCF::PfxCertificate *) 0 ;
  RCF::Win32CertificateLocation arg2 ;
  RCF::Win32CertificateStore arg3 ;
  boost::shared_ptr< RCF::PfxCertificate > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::PfxCertificate > *)jarg1;
  arg1 = (RCF::PfxCertificate *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (RCF::Win32CertificateLocation)jarg2; 
  arg3 = (RCF::Win32CertificateStore)jarg3; 
  {
    try 
    {
      (arg1)->addToStore(arg2,arg3);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PfxCertificate(void * jarg1) {
  RCF::PfxCertificate *arg1 = (RCF::PfxCertificate *) 0 ;
  boost::shared_ptr< RCF::PfxCertificate > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::PfxCertificate > *)jarg1;
  arg1 = (RCF::PfxCertificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      (void)arg1; delete smartarg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StoreCertificate(int jarg1, int jarg2, wchar_t * jarg3) {
  void * jresult ;
  RCF::Win32CertificateLocation arg1 ;
  RCF::Win32CertificateStore arg2 ;
  RCF::tstring *arg3 = 0 ;
  RCF::StoreCertificate *result = 0 ;
  
  arg1 = (RCF::Win32CertificateLocation)jarg1; 
  arg2 = (RCF::Win32CertificateStore)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null wstring", 0);
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try 
    {
      result = (RCF::StoreCertificate *)new RCF::StoreCertificate(arg1,arg2,(RCF::tstring const &)*arg3);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  
  jresult = result ? new boost::shared_ptr<  RCF::StoreCertificate >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StoreCertificate_removeFromStore(void * jarg1) {
  RCF::StoreCertificate *arg1 = (RCF::StoreCertificate *) 0 ;
  boost::shared_ptr< RCF::StoreCertificate > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::StoreCertificate > *)jarg1;
  arg1 = (RCF::StoreCertificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      (arg1)->removeFromStore();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StoreCertificate(void * jarg1) {
  RCF::StoreCertificate *arg1 = (RCF::StoreCertificate *) 0 ;
  boost::shared_ptr< RCF::StoreCertificate > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::StoreCertificate > *)jarg1;
  arg1 = (RCF::StoreCertificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      (void)arg1; delete smartarg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StoreCertificateIterator(int jarg1, int jarg2) {
  void * jresult ;
  RCF::Win32CertificateLocation arg1 ;
  RCF::Win32CertificateStore arg2 ;
  RCF::StoreCertificateIterator *result = 0 ;
  
  arg1 = (RCF::Win32CertificateLocation)jarg1; 
  arg2 = (RCF::Win32CertificateStore)jarg2; 
  {
    try 
    {
      result = (RCF::StoreCertificateIterator *)new RCF::StoreCertificateIterator(arg1,arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StoreCertificateIterator_moveNext(void * jarg1) {
  unsigned int jresult ;
  RCF::StoreCertificateIterator *arg1 = (RCF::StoreCertificateIterator *) 0 ;
  bool result;
  
  arg1 = (RCF::StoreCertificateIterator *)jarg1; 
  {
    try 
    {
      result = (bool)(arg1)->moveNext();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StoreCertificateIterator_reset(void * jarg1) {
  RCF::StoreCertificateIterator *arg1 = (RCF::StoreCertificateIterator *) 0 ;
  
  arg1 = (RCF::StoreCertificateIterator *)jarg1; 
  {
    try 
    {
      (arg1)->reset();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StoreCertificateIterator_current(void * jarg1) {
  void * jresult ;
  RCF::StoreCertificateIterator *arg1 = (RCF::StoreCertificateIterator *) 0 ;
  RCF::Win32CertificatePtr result;
  
  arg1 = (RCF::StoreCertificateIterator *)jarg1; 
  {
    try 
    {
      result = (arg1)->current();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result ? new RCF::Win32CertificatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StoreCertificateIterator(void * jarg1) {
  RCF::StoreCertificateIterator *arg1 = (RCF::StoreCertificateIterator *) 0 ;
  
  arg1 = (RCF::StoreCertificateIterator *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_setDefaultSslImplementation(int jarg1) {
  RCF::SslImplementation arg1 ;
  
  arg1 = (RCF::SslImplementation)jarg1; 
  {
    try 
    {
      RCF::setDefaultSslImplementation(arg1);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_getDefaultSslImplementation() {
  int jresult ;
  RCF::SslImplementation result;
  
  {
    try 
    {
      result = (RCF::SslImplementation)RCF::getDefaultSslImplementation();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IpAddress__SWIG_0(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  RCF::IpAddress *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try 
    {
      result = (RCF::IpAddress *)new RCF::IpAddress((std::string const &)*arg1);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IpAddress__SWIG_1(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  RCF::IpAddress *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  {
    try 
    {
      result = (RCF::IpAddress *)new RCF::IpAddress((std::string const &)*arg1,arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IpAddress(void * jarg1) {
  RCF::IpAddress *arg1 = (RCF::IpAddress *) 0 ;
  
  arg1 = (RCF::IpAddress *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ThreadPool__SWIG_0(unsigned long jarg1) {
  void * jresult ;
  std::size_t arg1 ;
  RCF::ThreadPool *result = 0 ;
  
  arg1 = (std::size_t)jarg1; 
  {
    try 
    {
      result = (RCF::ThreadPool *)new RCF::ThreadPool(arg1);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  
  jresult = result ? new boost::shared_ptr<  RCF::ThreadPool >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ThreadPool__SWIG_1(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  std::size_t arg1 ;
  std::size_t arg2 ;
  RCF::ThreadPool *result = 0 ;
  
  arg1 = (std::size_t)jarg1; 
  arg2 = (std::size_t)jarg2; 
  {
    try 
    {
      result = (RCF::ThreadPool *)new RCF::ThreadPool(arg1,arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  
  jresult = result ? new boost::shared_ptr<  RCF::ThreadPool >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ThreadPool_setThreadMinCount(void * jarg1, unsigned long jarg2) {
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  std::size_t arg2 ;
  boost::shared_ptr< RCF::ThreadPool > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::ThreadPool > *)jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::size_t)jarg2; 
  {
    try 
    {
      (arg1)->setThreadMinCount(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ThreadPool_getThreadMinCount(void * jarg1) {
  unsigned long jresult ;
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  boost::shared_ptr< RCF::ThreadPool const > *smartarg1 = 0 ;
  std::size_t result;
  
  
  smartarg1 = (boost::shared_ptr< const RCF::ThreadPool > *)jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = ((RCF::ThreadPool const *)arg1)->getThreadMinCount();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ThreadPool_setThreadMaxCount(void * jarg1, unsigned long jarg2) {
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  std::size_t arg2 ;
  boost::shared_ptr< RCF::ThreadPool > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::ThreadPool > *)jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::size_t)jarg2; 
  {
    try 
    {
      (arg1)->setThreadMaxCount(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ThreadPool_getThreadMaxCount(void * jarg1) {
  unsigned long jresult ;
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  boost::shared_ptr< RCF::ThreadPool const > *smartarg1 = 0 ;
  std::size_t result;
  
  
  smartarg1 = (boost::shared_ptr< const RCF::ThreadPool > *)jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = ((RCF::ThreadPool const *)arg1)->getThreadMaxCount();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ThreadPool_setThreadIdleTimeoutMs(void * jarg1, unsigned int jarg2) {
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  boost::uint32_t arg2 ;
  boost::shared_ptr< RCF::ThreadPool > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::ThreadPool > *)jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (boost::uint32_t)jarg2; 
  {
    try 
    {
      (arg1)->setThreadIdleTimeoutMs(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ThreadPool_getThreadIdleTimeoutMs(void * jarg1) {
  unsigned int jresult ;
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  boost::shared_ptr< RCF::ThreadPool const > *smartarg1 = 0 ;
  boost::uint32_t result;
  
  
  smartarg1 = (boost::shared_ptr< const RCF::ThreadPool > *)jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = (boost::uint32_t)((RCF::ThreadPool const *)arg1)->getThreadIdleTimeoutMs();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ThreadPool_setReserveLastThread(void * jarg1, unsigned int jarg2) {
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RCF::ThreadPool > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::ThreadPool > *)jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try 
    {
      (arg1)->setReserveLastThread(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ThreadPool_getReserveLastThread(void * jarg1) {
  unsigned int jresult ;
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  boost::shared_ptr< RCF::ThreadPool const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const RCF::ThreadPool > *)jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = (bool)((RCF::ThreadPool const *)arg1)->getReserveLastThread();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ThreadPool_setThreadName(void * jarg1, char * jarg2) {
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RCF::ThreadPool > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::ThreadPool > *)jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try 
    {
      (arg1)->setThreadName((std::string const &)*arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ThreadPool_getThreadName(void * jarg1) {
  char * jresult ;
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  boost::shared_ptr< RCF::ThreadPool const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (boost::shared_ptr< const RCF::ThreadPool > *)jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = ((RCF::ThreadPool const *)arg1)->getThreadName();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ThreadPool(void * jarg1) {
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  boost::shared_ptr< RCF::ThreadPool > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  RCF::ThreadPool > *)jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      (void)arg1; delete smartarg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Endpoint(void * jarg1) {
  RCF::Endpoint *arg1 = (RCF::Endpoint *) 0 ;
  
  arg1 = (RCF::Endpoint *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TcpEndpoint__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  RCF::TcpEndpoint *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try 
    {
      result = (RCF::TcpEndpoint *)new RCF::TcpEndpoint(arg1);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TcpEndpoint__SWIG_1(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  RCF::TcpEndpoint *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  {
    try 
    {
      result = (RCF::TcpEndpoint *)new RCF::TcpEndpoint((std::string const &)*arg1,arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TcpEndpoint_getIp(void * jarg1) {
  char * jresult ;
  RCF::TcpEndpoint *arg1 = (RCF::TcpEndpoint *) 0 ;
  std::string result;
  
  arg1 = (RCF::TcpEndpoint *)jarg1; 
  {
    try 
    {
      result = ((RCF::TcpEndpoint const *)arg1)->getIp();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TcpEndpoint_getPort(void * jarg1) {
  int jresult ;
  RCF::TcpEndpoint *arg1 = (RCF::TcpEndpoint *) 0 ;
  int result;
  
  arg1 = (RCF::TcpEndpoint *)jarg1; 
  {
    try 
    {
      result = (int)((RCF::TcpEndpoint const *)arg1)->getPort();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TcpEndpoint_asString(void * jarg1) {
  char * jresult ;
  RCF::TcpEndpoint *arg1 = (RCF::TcpEndpoint *) 0 ;
  std::string result;
  
  arg1 = (RCF::TcpEndpoint *)jarg1; 
  {
    try 
    {
      result = ((RCF::TcpEndpoint const *)arg1)->asString();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TcpEndpoint(void * jarg1) {
  RCF::TcpEndpoint *arg1 = (RCF::TcpEndpoint *) 0 ;
  
  arg1 = (RCF::TcpEndpoint *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Win32NamedPipeEndpoint(wchar_t * jarg1) {
  void * jresult ;
  RCF::tstring *arg1 = 0 ;
  RCF::Win32NamedPipeEndpoint *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null wstring", 0);
    return 0;
  }
  std::wstring arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try 
    {
      result = (RCF::Win32NamedPipeEndpoint *)new RCF::Win32NamedPipeEndpoint((RCF::tstring const &)*arg1);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Win32NamedPipeEndpoint(void * jarg1) {
  RCF::Win32NamedPipeEndpoint *arg1 = (RCF::Win32NamedPipeEndpoint *) 0 ;
  
  arg1 = (RCF::Win32NamedPipeEndpoint *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnixLocalEndpoint(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  RCF::UnixLocalEndpoint *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try 
    {
      result = (RCF::UnixLocalEndpoint *)new RCF::UnixLocalEndpoint((std::string const &)*arg1);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnixLocalEndpoint(void * jarg1) {
  RCF::UnixLocalEndpoint *arg1 = (RCF::UnixLocalEndpoint *) 0 ;
  
  arg1 = (RCF::UnixLocalEndpoint *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HttpEndpoint__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  RCF::HttpEndpoint *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try 
    {
      result = (RCF::HttpEndpoint *)new RCF::HttpEndpoint(arg1);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HttpEndpoint__SWIG_1(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  RCF::HttpEndpoint *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  {
    try 
    {
      result = (RCF::HttpEndpoint *)new RCF::HttpEndpoint((std::string const &)*arg1,arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HttpEndpoint(void * jarg1) {
  RCF::HttpEndpoint *arg1 = (RCF::HttpEndpoint *) 0 ;
  
  arg1 = (RCF::HttpEndpoint *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HttpsEndpoint__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  RCF::HttpsEndpoint *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try 
    {
      result = (RCF::HttpsEndpoint *)new RCF::HttpsEndpoint(arg1);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HttpsEndpoint__SWIG_1(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  RCF::HttpsEndpoint *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  {
    try 
    {
      result = (RCF::HttpsEndpoint *)new RCF::HttpsEndpoint((std::string const &)*arg1,arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HttpsEndpoint(void * jarg1) {
  RCF::HttpsEndpoint *arg1 = (RCF::HttpsEndpoint *) 0 ;
  
  arg1 = (RCF::HttpsEndpoint *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_ServerTransport_getTransportType(void * jarg1) {
  int jresult ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  RCF::TransportType result;
  
  arg1 = (RCF::ServerTransport *)jarg1; 
  {
    try 
    {
      result = (RCF::TransportType)(arg1)->getTransportType();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ServerTransport_setMaxIncomingMessageLength(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  std::size_t arg2 ;
  RCF::ServerTransport *result = 0 ;
  
  arg1 = (RCF::ServerTransport *)jarg1; 
  arg2 = (std::size_t)jarg2; 
  {
    try 
    {
      result = (RCF::ServerTransport *) &(arg1)->setMaxIncomingMessageLength(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ServerTransport_getMaxIncomingMessageLength(void * jarg1) {
  unsigned long jresult ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  std::size_t result;
  
  arg1 = (RCF::ServerTransport *)jarg1; 
  {
    try 
    {
      result = ((RCF::ServerTransport const *)arg1)->getMaxIncomingMessageLength();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ServerTransport_setConnectionLimit(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  std::size_t arg2 ;
  RCF::ServerTransport *result = 0 ;
  
  arg1 = (RCF::ServerTransport *)jarg1; 
  arg2 = (std::size_t)jarg2; 
  {
    try 
    {
      result = (RCF::ServerTransport *) &(arg1)->setConnectionLimit(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ServerTransport_getConnectionLimit(void * jarg1) {
  unsigned long jresult ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  std::size_t result;
  
  arg1 = (RCF::ServerTransport *)jarg1; 
  {
    try 
    {
      result = ((RCF::ServerTransport const *)arg1)->getConnectionLimit();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ServerTransport_setInitialNumberOfConnections(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  std::size_t arg2 ;
  RCF::ServerTransport *result = 0 ;
  
  arg1 = (RCF::ServerTransport *)jarg1; 
  arg2 = (std::size_t)jarg2; 
  {
    try 
    {
      result = (RCF::ServerTransport *) &(arg1)->setInitialNumberOfConnections(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ServerTransport_getInitialNumberOfConnections(void * jarg1) {
  unsigned long jresult ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  std::size_t result;
  
  arg1 = (RCF::ServerTransport *)jarg1; 
  {
    try 
    {
      result = ((RCF::ServerTransport const *)arg1)->getInitialNumberOfConnections();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ServerTransport_setThreadPool(void * jarg1, void * jarg2) {
  void * jresult ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  RCF::ThreadPoolPtr arg2 ;
  RCF::ServerTransport *result = 0 ;
  
  arg1 = (RCF::ServerTransport *)jarg1; 
  if (jarg2) arg2 = *(RCF::ThreadPoolPtr *)jarg2; 
  {
    try 
    {
      result = (RCF::ServerTransport *) &(arg1)->setThreadPool(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ServerTransport_setSupportedProtocols(void * jarg1, void * jarg2) {
  void * jresult ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  std::vector< RCF::TransportProtocol > *arg2 = 0 ;
  RCF::ServerTransport *result = 0 ;
  
  arg1 = (RCF::ServerTransport *)jarg1; 
  arg2 = (std::vector< RCF::TransportProtocol > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< RCF::TransportProtocol > const & type is null", 0);
    return 0;
  } 
  {
    try 
    {
      result = (RCF::ServerTransport *) &(arg1)->setSupportedProtocols((std::vector< RCF::TransportProtocol > const &)*arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ServerTransport_getSupportedProtocols(void * jarg1) {
  void * jresult ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  std::vector< RCF::TransportProtocol > *result = 0 ;
  
  arg1 = (RCF::ServerTransport *)jarg1; 
  {
    try 
    {
      result = (std::vector< RCF::TransportProtocol > *) &((RCF::ServerTransport const *)arg1)->getSupportedProtocols();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ServerTransport(void * jarg1) {
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  
  arg1 = (RCF::ServerTransport *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientTransport_getTransportType(void * jarg1) {
  int jresult ;
  RCF::ClientTransport *arg1 = (RCF::ClientTransport *) 0 ;
  RCF::TransportType result;
  
  arg1 = (RCF::ClientTransport *)jarg1; 
  {
    try 
    {
      result = (RCF::TransportType)(arg1)->getTransportType();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientTransport_setMaxIncomingMessageLength(void * jarg1, unsigned long jarg2) {
  RCF::ClientTransport *arg1 = (RCF::ClientTransport *) 0 ;
  std::size_t arg2 ;
  
  arg1 = (RCF::ClientTransport *)jarg1; 
  arg2 = (std::size_t)jarg2; 
  {
    try 
    {
      (arg1)->setMaxIncomingMessageLength(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ClientTransport_getMaxIncomingMessageLength(void * jarg1) {
  unsigned long jresult ;
  RCF::ClientTransport *arg1 = (RCF::ClientTransport *) 0 ;
  std::size_t result;
  
  arg1 = (RCF::ClientTransport *)jarg1; 
  {
    try 
    {
      result = ((RCF::ClientTransport const *)arg1)->getMaxIncomingMessageLength();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ClientTransport_getLastRequestSize(void * jarg1) {
  unsigned long jresult ;
  RCF::ClientTransport *arg1 = (RCF::ClientTransport *) 0 ;
  std::size_t result;
  
  arg1 = (RCF::ClientTransport *)jarg1; 
  {
    try 
    {
      result = (arg1)->getLastRequestSize();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ClientTransport_getLastResponseSize(void * jarg1) {
  unsigned long jresult ;
  RCF::ClientTransport *arg1 = (RCF::ClientTransport *) 0 ;
  std::size_t result;
  
  arg1 = (RCF::ClientTransport *)jarg1; 
  {
    try 
    {
      result = (arg1)->getLastResponseSize();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_ClientTransport_getRunningTotalBytesSent(void * jarg1) {
  unsigned long long jresult ;
  RCF::ClientTransport *arg1 = (RCF::ClientTransport *) 0 ;
  boost::uint64_t result;
  
  arg1 = (RCF::ClientTransport *)jarg1; 
  {
    try 
    {
      result = (boost::uint64_t)(arg1)->getRunningTotalBytesSent();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_ClientTransport_getRunningTotalBytesReceived(void * jarg1) {
  unsigned long long jresult ;
  RCF::ClientTransport *arg1 = (RCF::ClientTransport *) 0 ;
  boost::uint64_t result;
  
  arg1 = (RCF::ClientTransport *)jarg1; 
  {
    try 
    {
      result = (boost::uint64_t)(arg1)->getRunningTotalBytesReceived();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientTransport_resetRunningTotals(void * jarg1) {
  RCF::ClientTransport *arg1 = (RCF::ClientTransport *) 0 ;
  
  arg1 = (RCF::ClientTransport *)jarg1; 
  {
    try 
    {
      (arg1)->resetRunningTotals();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ClientTransport(void * jarg1) {
  RCF::ClientTransport *arg1 = (RCF::ClientTransport *) 0 ;
  
  arg1 = (RCF::ClientTransport *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp__SwigCallbackArgs_mErrorString_set(void * jarg1, char * jarg2) {
  RCF::_SwigCallbackArgs *arg1 = (RCF::_SwigCallbackArgs *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (RCF::_SwigCallbackArgs *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->mErrorString = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp__SwigCallbackArgs_mErrorString_get(void * jarg1) {
  char * jresult ;
  RCF::_SwigCallbackArgs *arg1 = (RCF::_SwigCallbackArgs *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (RCF::_SwigCallbackArgs *)jarg1; 
  result = (std::string *) & ((arg1)->mErrorString);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp__SwigCallbackArgs_mCertificatePtr_set(void * jarg1, void * jarg2) {
  RCF::_SwigCallbackArgs *arg1 = (RCF::_SwigCallbackArgs *) 0 ;
  RCF::CertificatePtr *arg2 = 0 ;
  RCF::CertificatePtr tempnull2 ;
  
  arg1 = (RCF::_SwigCallbackArgs *)jarg1; 
  arg2 = jarg2 ? (RCF::CertificatePtr *)jarg2 : &tempnull2; 
  if (arg1) (arg1)->mCertificatePtr = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp__SwigCallbackArgs_mCertificatePtr_get(void * jarg1) {
  void * jresult ;
  RCF::_SwigCallbackArgs *arg1 = (RCF::_SwigCallbackArgs *) 0 ;
  RCF::CertificatePtr *result = 0 ;
  
  arg1 = (RCF::_SwigCallbackArgs *)jarg1; 
  result = (RCF::CertificatePtr *) & ((arg1)->mCertificatePtr);
  jresult = *result ? new RCF::CertificatePtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new__SwigCallbackArgs() {
  void * jresult ;
  RCF::_SwigCallbackArgs *result = 0 ;
  
  {
    try 
    {
      result = (RCF::_SwigCallbackArgs *)new RCF::_SwigCallbackArgs();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete__SwigCallbackArgs(void * jarg1) {
  RCF::_SwigCallbackArgs *arg1 = (RCF::_SwigCallbackArgs *) 0 ;
  
  arg1 = (RCF::_SwigCallbackArgs *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new__SwigCallback() {
  void * jresult ;
  RCF::_SwigCallback *result = 0 ;
  
  {
    try 
    {
      result = (RCF::_SwigCallback *)new SwigDirector__SwigCallback();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete__SwigCallback(void * jarg1) {
  RCF::_SwigCallback *arg1 = (RCF::_SwigCallback *) 0 ;
  
  arg1 = (RCF::_SwigCallback *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp__SwigCallback_Run(void * jarg1) {
  RCF::_SwigCallback *arg1 = (RCF::_SwigCallback *) 0 ;
  
  arg1 = (RCF::_SwigCallback *)jarg1; 
  {
    try 
    {
      (arg1)->Run();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp__SwigCallback_RunSwigExplicit_SwigCallback(void * jarg1) {
  RCF::_SwigCallback *arg1 = (RCF::_SwigCallback *) 0 ;
  
  arg1 = (RCF::_SwigCallback *)jarg1; 
  {
    try 
    {
      (arg1)->RCF::_SwigCallback::Run();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp__SwigCallback_ProtoRpcBegin(void * jarg1, void * jarg2, void * jarg3, void * jarg4, char * jarg5, int jarg6) {
  RCF::_SwigCallback *arg1 = (RCF::_SwigCallback *) 0 ;
  RCF::_SwigCallbackArgs *arg2 = (RCF::_SwigCallbackArgs *) 0 ;
  RCF::RcfProtoServer *arg3 = (RCF::RcfProtoServer *) 0 ;
  RCF::RcfProtoSession *arg4 = (RCF::RcfProtoSession *) 0 ;
  std::string *arg5 = 0 ;
  int arg6 ;
  
  arg1 = (RCF::_SwigCallback *)jarg1; 
  arg2 = (RCF::_SwigCallbackArgs *)jarg2; 
  arg3 = (RCF::RcfProtoServer *)jarg3; 
  arg4 = (RCF::RcfProtoSession *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (int)jarg6; 
  {
    try 
    {
      (arg1)->ProtoRpcBegin(arg2,arg3,arg4,(std::string const &)*arg5,arg6);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp__SwigCallback_ProtoRpcBeginSwigExplicit_SwigCallback(void * jarg1, void * jarg2, void * jarg3, void * jarg4, char * jarg5, int jarg6) {
  RCF::_SwigCallback *arg1 = (RCF::_SwigCallback *) 0 ;
  RCF::_SwigCallbackArgs *arg2 = (RCF::_SwigCallbackArgs *) 0 ;
  RCF::RcfProtoServer *arg3 = (RCF::RcfProtoServer *) 0 ;
  RCF::RcfProtoSession *arg4 = (RCF::RcfProtoSession *) 0 ;
  std::string *arg5 = 0 ;
  int arg6 ;
  
  arg1 = (RCF::_SwigCallback *)jarg1; 
  arg2 = (RCF::_SwigCallbackArgs *)jarg2; 
  arg3 = (RCF::RcfProtoServer *)jarg3; 
  arg4 = (RCF::RcfProtoSession *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (int)jarg6; 
  {
    try 
    {
      (arg1)->RCF::_SwigCallback::ProtoRpcBegin(arg2,arg3,arg4,(std::string const &)*arg5,arg6);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp__SwigCallback_ValidateCertificate(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  RCF::_SwigCallback *arg1 = (RCF::_SwigCallback *) 0 ;
  RCF::_SwigCallbackArgs *arg2 = (RCF::_SwigCallbackArgs *) 0 ;
  bool result;
  
  arg1 = (RCF::_SwigCallback *)jarg1; 
  arg2 = (RCF::_SwigCallbackArgs *)jarg2; 
  {
    try 
    {
      result = (bool)(arg1)->ValidateCertificate(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp__SwigCallback_ValidateCertificateSwigExplicit_SwigCallback(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  RCF::_SwigCallback *arg1 = (RCF::_SwigCallback *) 0 ;
  RCF::_SwigCallbackArgs *arg2 = (RCF::_SwigCallbackArgs *) 0 ;
  bool result;
  
  arg1 = (RCF::_SwigCallback *)jarg1; 
  arg2 = (RCF::_SwigCallbackArgs *)jarg2; 
  {
    try 
    {
      result = (bool)(arg1)->RCF::_SwigCallback::ValidateCertificate(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp__SwigCallback_director_connect(void *objarg, SwigDirector__SwigCallback::SWIG_Callback0_t callback0, SwigDirector__SwigCallback::SWIG_Callback1_t callback1, SwigDirector__SwigCallback::SWIG_Callback2_t callback2) {
  RCF::_SwigCallback *obj = (RCF::_SwigCallback *)objarg;
  SwigDirector__SwigCallback *director = dynamic_cast<SwigDirector__SwigCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel__CallMethodSwig(void * jarg1, char * jarg2, int jarg3, unsigned char* jarg4, int jarg5, void * jarg6) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  int arg5 ;
  RCF::_SwigCallback *arg6 = (RCF::_SwigCallback *) 0 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = jarg4;
  arg5 = (int)jarg5; 
  arg6 = (RCF::_SwigCallback *)jarg6; 
  {
    try 
    {
      (arg1)->_CallMethodSwig((std::string const &)*arg2,arg3,arg4,arg5,arg6);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_RcfProtoChannel__GetResponseBufferLength(void * jarg1) {
  int jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  int result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = (int)((RCF::RcfProtoChannel const *)arg1)->_GetResponseBufferLength();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel__GetResponseBuffer(void * jarg1, unsigned char* jarg2, int jarg3) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  arg2 = jarg2;
  arg3 = (int)jarg3; 
  {
    try 
    {
      ((RCF::RcfProtoChannel const *)arg1)->_GetResponseBuffer(arg2,arg3);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RcfProtoChannel(void * jarg1) {
  void * jresult ;
  RCF::Endpoint *arg1 = 0 ;
  RCF::RcfProtoChannel *result = 0 ;
  
  arg1 = (RCF::Endpoint *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RCF::Endpoint const & type is null", 0);
    return 0;
  } 
  {
    try 
    {
      result = (RCF::RcfProtoChannel *)new RCF::RcfProtoChannel((RCF::Endpoint const &)*arg1);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel__CallMethodSwig_WithCopy(void * jarg1, char * jarg2, int jarg3, char * jarg4, void * jarg5) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  RCF::_SwigCallback *arg5 = (RCF::_SwigCallback *) 0 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (RCF::_SwigCallback *)jarg5; 
  {
    try 
    {
      (arg1)->_CallMethodSwig_WithCopy((std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RcfProtoChannel__GetResponseBuffer_WithCopy(void * jarg1) {
  char * jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  std::string result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = ((RCF::RcfProtoChannel const *)arg1)->_GetResponseBuffer_WithCopy();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RcfProtoChannel_Failed(void * jarg1) {
  unsigned int jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  bool result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = (bool)(arg1)->Failed();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RcfProtoChannel_ErrorText(void * jarg1) {
  char * jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  std::string result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = (arg1)->ErrorText();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel_StartCancel(void * jarg1) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      (arg1)->StartCancel();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RcfProtoChannel_Completed(void * jarg1) {
  unsigned int jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  bool result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = (bool)(arg1)->Completed();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel_connect(void * jarg1) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      (arg1)->connect();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel_disconnect(void * jarg1) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      (arg1)->disconnect();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel_setRemoteCallTimeoutMs(void * jarg1, unsigned int jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try 
    {
      (arg1)->setRemoteCallTimeoutMs(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RcfProtoChannel_getRemoteCallTimeoutMs(void * jarg1) {
  unsigned int jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  unsigned int result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = (unsigned int)((RCF::RcfProtoChannel const *)arg1)->getRemoteCallTimeoutMs();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel_setConnectTimeoutMs(void * jarg1, unsigned int jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try 
    {
      (arg1)->setConnectTimeoutMs(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RcfProtoChannel_getConnectTimeoutMs(void * jarg1) {
  unsigned int jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  unsigned int result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = (unsigned int)((RCF::RcfProtoChannel const *)arg1)->getConnectTimeoutMs();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel_setTransportProtocol(void * jarg1, int jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::TransportProtocol arg2 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  arg2 = (RCF::TransportProtocol)jarg2; 
  {
    try 
    {
      (arg1)->setTransportProtocol(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_RcfProtoChannel_getTransportProtocol(void * jarg1) {
  int jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::TransportProtocol result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = (RCF::TransportProtocol)(arg1)->getTransportProtocol();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel_setAsynchronousRpcMode(void * jarg1, unsigned int jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  bool arg2 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try 
    {
      (arg1)->setAsynchronousRpcMode(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RcfProtoChannel_getAsynchronousRpcMode(void * jarg1) {
  unsigned int jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  bool result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = (bool)(arg1)->getAsynchronousRpcMode();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel_setPingBackIntervalMs(void * jarg1, int jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  int arg2 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try 
    {
      (arg1)->setPingBackIntervalMs(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_RcfProtoChannel_getPingBackIntervalMs(void * jarg1) {
  int jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  int result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = (int)(arg1)->getPingBackIntervalMs();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel_setHttpProxy(void * jarg1, char * jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try 
    {
      (arg1)->setHttpProxy((std::string const &)*arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RcfProtoChannel_getHttpProxy(void * jarg1) {
  char * jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  std::string result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = (arg1)->getHttpProxy();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel_setHttpProxyPort(void * jarg1, int jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  int arg2 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try 
    {
      (arg1)->setHttpProxyPort(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_RcfProtoChannel_getHttpProxyPort(void * jarg1) {
  int jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  int result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = (int)(arg1)->getHttpProxyPort();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RcfProtoChannel_getTransportType(void * jarg1) {
  int jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::TransportType result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = (RCF::TransportType)(arg1)->getTransportType();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel_setUsername(void * jarg1, wchar_t * jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::tstring *arg2 = 0 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null wstring", 0);
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try 
    {
      (arg1)->setUsername((RCF::tstring const &)*arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RcfProtoChannel_getUsername(void * jarg1) {
  void * jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::tstring result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = (arg1)->getUsername();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel_setPassword(void * jarg1, wchar_t * jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::tstring *arg2 = 0 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null wstring", 0);
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try 
    {
      (arg1)->setPassword((RCF::tstring const &)*arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RcfProtoChannel_getPassword(void * jarg1) {
  void * jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::tstring result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = (arg1)->getPassword();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel_setKerberosSpn(void * jarg1, wchar_t * jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::tstring *arg2 = 0 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null wstring", 0);
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try 
    {
      (arg1)->setKerberosSpn((RCF::tstring const &)*arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RcfProtoChannel_getKerberosSpn(void * jarg1) {
  void * jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::tstring result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = (arg1)->getKerberosSpn();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel_setEnableCompression(void * jarg1, unsigned int jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  bool arg2 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try 
    {
      (arg1)->setEnableCompression(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RcfProtoChannel_getEnableCompression(void * jarg1) {
  unsigned int jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  bool result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = (bool)(arg1)->getEnableCompression();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel_setCertificate(void * jarg1, void * jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::CertificatePtr arg2 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  if (jarg2) arg2 = *(RCF::CertificatePtr *)jarg2; 
  {
    try 
    {
      (arg1)->setCertificate(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RcfProtoChannel_getCertificate(void * jarg1) {
  void * jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::CertificatePtr result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = (arg1)->getCertificate();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result ? new RCF::CertificatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel_setCaCertificate(void * jarg1, void * jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::CertificatePtr arg2 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  if (jarg2) arg2 = *(RCF::CertificatePtr *)jarg2; 
  {
    try 
    {
      (arg1)->setCaCertificate(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RcfProtoChannel_getCaCertificate(void * jarg1) {
  void * jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::CertificatePtr result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = (arg1)->getCaCertificate();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result ? new RCF::CertificatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel_setOpenSslCipherSuite(void * jarg1, char * jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try 
    {
      (arg1)->setOpenSslCipherSuite((std::string const &)*arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RcfProtoChannel_getOpenSslCipherSuite(void * jarg1) {
  char * jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  std::string result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = ((RCF::RcfProtoChannel const *)arg1)->getOpenSslCipherSuite();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel_setEnableSchannelCertificateValidation(void * jarg1, wchar_t * jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::tstring *arg2 = 0 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null wstring", 0);
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try 
    {
      (arg1)->setEnableSchannelCertificateValidation((RCF::tstring const &)*arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RcfProtoChannel_getEnableSchannelCertificateValidation(void * jarg1) {
  void * jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::tstring result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = ((RCF::RcfProtoChannel const *)arg1)->getEnableSchannelCertificateValidation();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel__setCertificateValidationCallback(void * jarg1, void * jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::_SwigCallback *arg2 = (RCF::_SwigCallback *) 0 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  arg2 = (RCF::_SwigCallback *)jarg2; 
  {
    try 
    {
      (arg1)->_setCertificateValidationCallback(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoChannel_setSslImplementation(void * jarg1, int jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::SslImplementation arg2 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  arg2 = (RCF::SslImplementation)jarg2; 
  {
    try 
    {
      (arg1)->setSslImplementation(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_RcfProtoChannel_getSslImplementation(void * jarg1) {
  int jresult ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::SslImplementation result;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      result = (RCF::SslImplementation)((RCF::RcfProtoChannel const *)arg1)->getSslImplementation();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RcfProtoChannel(void * jarg1) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  
  arg1 = (RCF::RcfProtoChannel *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_RcfProtoSession__GetRequestBufferLength(void * jarg1) {
  int jresult ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  int result;
  
  arg1 = (RCF::RcfProtoSession *)jarg1; 
  {
    try 
    {
      result = (int)(arg1)->_GetRequestBufferLength();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoSession__GetRequestBuffer(void * jarg1, unsigned char* jarg2, int jarg3) {
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  
  arg1 = (RCF::RcfProtoSession *)jarg1; 
  arg2 = jarg2;
  arg3 = (int)jarg3; 
  {
    try 
    {
      (arg1)->_GetRequestBuffer(arg2,arg3);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoSession__SetResponseBuffer(void * jarg1, unsigned char* jarg2, int jarg3) {
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  
  arg1 = (RCF::RcfProtoSession *)jarg1; 
  arg2 = jarg2;
  arg3 = (int)jarg3; 
  {
    try 
    {
      (arg1)->_SetResponseBuffer(arg2,arg3);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoSession_SetFailed(void * jarg1, char * jarg2) {
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (RCF::RcfProtoSession *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try 
    {
      (arg1)->SetFailed((std::string const &)*arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RcfProtoSession_IsCanceled(void * jarg1) {
  unsigned int jresult ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  bool result;
  
  arg1 = (RCF::RcfProtoSession *)jarg1; 
  {
    try 
    {
      result = (bool)((RCF::RcfProtoSession const *)arg1)->IsCanceled();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoSession__Commit__SWIG_0(void * jarg1, char * jarg2) {
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (RCF::RcfProtoSession *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try 
    {
      (arg1)->_Commit((std::string const &)*arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoSession__Commit__SWIG_1(void * jarg1) {
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  
  arg1 = (RCF::RcfProtoSession *)jarg1; 
  {
    try 
    {
      (arg1)->_Commit();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RcfProtoSession__GetRequestBuffer_WithCopy(void * jarg1) {
  char * jresult ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  std::string result;
  
  arg1 = (RCF::RcfProtoSession *)jarg1; 
  {
    try 
    {
      result = (arg1)->_GetRequestBuffer_WithCopy();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoSession__SetResponseBuffer_WithCopy(void * jarg1, char * jarg2) {
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (RCF::RcfProtoSession *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try 
    {
      (arg1)->_SetResponseBuffer_WithCopy((std::string const &)*arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RcfProtoSession_getClientUsername(void * jarg1) {
  void * jresult ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  RCF::tstring result;
  
  arg1 = (RCF::RcfProtoSession *)jarg1; 
  {
    try 
    {
      result = (arg1)->getClientUsername();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RcfProtoSession_getTransportProtocol(void * jarg1) {
  int jresult ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  RCF::TransportProtocol result;
  
  arg1 = (RCF::RcfProtoSession *)jarg1; 
  {
    try 
    {
      result = (RCF::TransportProtocol)(arg1)->getTransportProtocol();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RcfProtoSession_getTransportType(void * jarg1) {
  int jresult ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  RCF::TransportType result;
  
  arg1 = (RCF::RcfProtoSession *)jarg1; 
  {
    try 
    {
      result = (RCF::TransportType)(arg1)->getTransportType();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RcfProtoSession_getEnableCompression(void * jarg1) {
  unsigned int jresult ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  bool result;
  
  arg1 = (RCF::RcfProtoSession *)jarg1; 
  {
    try 
    {
      result = (bool)(arg1)->getEnableCompression();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_RcfProtoSession_getConnectionDuration(void * jarg1) {
  unsigned long jresult ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  std::size_t result;
  
  arg1 = (RCF::RcfProtoSession *)jarg1; 
  {
    try 
    {
      result = ((RCF::RcfProtoSession const *)arg1)->getConnectionDuration();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_RcfProtoSession_getRemoteCallCount(void * jarg1) {
  unsigned long jresult ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  std::size_t result;
  
  arg1 = (RCF::RcfProtoSession *)jarg1; 
  {
    try 
    {
      result = ((RCF::RcfProtoSession const *)arg1)->getRemoteCallCount();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_RcfProtoSession_getTotalBytesReceived(void * jarg1) {
  unsigned long long jresult ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  boost::uint64_t result;
  
  arg1 = (RCF::RcfProtoSession *)jarg1; 
  {
    try 
    {
      result = (boost::uint64_t)((RCF::RcfProtoSession const *)arg1)->getTotalBytesReceived();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_RcfProtoSession_getTotalBytesSent(void * jarg1) {
  unsigned long long jresult ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  boost::uint64_t result;
  
  arg1 = (RCF::RcfProtoSession *)jarg1; 
  {
    try 
    {
      result = (boost::uint64_t)((RCF::RcfProtoSession const *)arg1)->getTotalBytesSent();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RcfProtoSession(void * jarg1) {
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  
  arg1 = (RCF::RcfProtoSession *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RcfProtoServer__SWIG_0() {
  void * jresult ;
  RCF::RcfProtoServer *result = 0 ;
  
  {
    try 
    {
      result = (RCF::RcfProtoServer *)new RCF::RcfProtoServer();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RcfProtoServer__SWIG_1(void * jarg1) {
  void * jresult ;
  RCF::Endpoint *arg1 = 0 ;
  RCF::RcfProtoServer *result = 0 ;
  
  arg1 = (RCF::Endpoint *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RCF::Endpoint const & type is null", 0);
    return 0;
  } 
  {
    try 
    {
      result = (RCF::RcfProtoServer *)new RCF::RcfProtoServer((RCF::Endpoint const &)*arg1);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RcfProtoServer(void * jarg1) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoServer_start(void * jarg1) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  {
    try 
    {
      (arg1)->start();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoServer_stop(void * jarg1) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  {
    try 
    {
      (arg1)->stop();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoServer__setCallbackTable(void * jarg1, void * jarg2) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::_SwigCallback *arg2 = (RCF::_SwigCallback *) 0 ;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  arg2 = (RCF::_SwigCallback *)jarg2; 
  {
    try 
    {
      (arg1)->_setCallbackTable(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoServer_setThreadPool(void * jarg1, void * jarg2) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::ThreadPoolPtr arg2 ;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  if (jarg2) arg2 = *(RCF::ThreadPoolPtr *)jarg2; 
  {
    try 
    {
      (arg1)->setThreadPool(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RcfProtoServer_getThreadPool(void * jarg1) {
  void * jresult ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::ThreadPoolPtr result;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  {
    try 
    {
      result = (arg1)->getThreadPool();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result ? new RCF::ThreadPoolPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RcfProtoServer_addEndpoint(void * jarg1, void * jarg2) {
  void * jresult ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::Endpoint *arg2 = 0 ;
  RCF::ServerTransport *result = 0 ;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  arg2 = (RCF::Endpoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RCF::Endpoint const & type is null", 0);
    return 0;
  } 
  {
    try 
    {
      result = (RCF::ServerTransport *) &(arg1)->addEndpoint((RCF::Endpoint const &)*arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoServer_setSupportedTransportProtocols(void * jarg1, void * jarg2) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  std::vector< RCF::TransportProtocol > *arg2 = 0 ;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  arg2 = (std::vector< RCF::TransportProtocol > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< RCF::TransportProtocol > const & type is null", 0);
    return ;
  } 
  {
    try 
    {
      (arg1)->setSupportedTransportProtocols((std::vector< RCF::TransportProtocol > const &)*arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RcfProtoServer_getSupportedTransportProtocols(void * jarg1) {
  void * jresult ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  std::vector< RCF::TransportProtocol > *result = 0 ;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  {
    try 
    {
      result = (std::vector< RCF::TransportProtocol > *) &((RCF::RcfProtoServer const *)arg1)->getSupportedTransportProtocols();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoServer_setSessionTimeoutMs(void * jarg1, unsigned int jarg2) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  boost::uint32_t arg2 ;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  {
    try 
    {
      (arg1)->setSessionTimeoutMs(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RcfProtoServer_getSessionTimeoutMs(void * jarg1) {
  unsigned int jresult ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  boost::uint32_t result;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  {
    try 
    {
      result = (boost::uint32_t)(arg1)->getSessionTimeoutMs();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoServer_setSessionHarvestingIntervalMs(void * jarg1, unsigned int jarg2) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  boost::uint32_t arg2 ;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  {
    try 
    {
      (arg1)->setSessionHarvestingIntervalMs(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RcfProtoServer_getSessionHarvestingIntervalMs(void * jarg1) {
  unsigned int jresult ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  boost::uint32_t result;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  {
    try 
    {
      result = (boost::uint32_t)(arg1)->getSessionHarvestingIntervalMs();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoServer_setCertificate(void * jarg1, void * jarg2) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::CertificatePtr arg2 ;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  if (jarg2) arg2 = *(RCF::CertificatePtr *)jarg2; 
  {
    try 
    {
      (arg1)->setCertificate(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RcfProtoServer_getCertificate(void * jarg1) {
  void * jresult ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::CertificatePtr result;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  {
    try 
    {
      result = (arg1)->getCertificate();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result ? new RCF::CertificatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoServer_setOpenSslCipherSuite(void * jarg1, char * jarg2) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try 
    {
      (arg1)->setOpenSslCipherSuite((std::string const &)*arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RcfProtoServer_getOpenSslCipherSuite(void * jarg1) {
  char * jresult ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  std::string result;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  {
    try 
    {
      result = ((RCF::RcfProtoServer const *)arg1)->getOpenSslCipherSuite();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoServer_setCaCertificate(void * jarg1, void * jarg2) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::CertificatePtr arg2 ;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  if (jarg2) arg2 = *(RCF::CertificatePtr *)jarg2; 
  {
    try 
    {
      (arg1)->setCaCertificate(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RcfProtoServer_getCaCertificate(void * jarg1) {
  void * jresult ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::CertificatePtr result;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  {
    try 
    {
      result = (arg1)->getCaCertificate();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result ? new RCF::CertificatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoServer_setEnableSchannelCertificateValidation(void * jarg1, wchar_t * jarg2) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::tstring *arg2 = 0 ;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null wstring", 0);
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try 
    {
      (arg1)->setEnableSchannelCertificateValidation((RCF::tstring const &)*arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RcfProtoServer_getEnableSchannelCertificateValidation(void * jarg1) {
  void * jresult ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::tstring result;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  {
    try 
    {
      result = ((RCF::RcfProtoServer const *)arg1)->getEnableSchannelCertificateValidation();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RcfProtoServer_setSslImplementation(void * jarg1, int jarg2) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::SslImplementation arg2 ;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  arg2 = (RCF::SslImplementation)jarg2; 
  {
    try 
    {
      (arg1)->setSslImplementation(arg2);
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_RcfProtoServer_getSslImplementation(void * jarg1) {
  int jresult ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::SslImplementation result;
  
  arg1 = (RCF::RcfProtoServer *)jarg1; 
  {
    try 
    {
      result = (RCF::SslImplementation)((RCF::RcfProtoServer const *)arg1)->getSslImplementation();
    } 
    catch (const RCF::Exception & e) 
    {
      std::string msg = e.getErrorString();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
    catch (const std::exception & e) 
    {
      std::string msg = e.what();
      SWIG_CSharpSetPendingExceptionCustom( msg.c_str() );
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT RCF::LogTarget * SWIGSTDCALL CSharp_LogToStdout_SWIGUpcast(RCF::LogToStdout *jarg1) {
    return (RCF::LogTarget *)jarg1;
}

SWIGEXPORT RCF::LogTarget * SWIGSTDCALL CSharp_LogToDebugWindow_SWIGUpcast(RCF::LogToDebugWindow *jarg1) {
    return (RCF::LogTarget *)jarg1;
}

SWIGEXPORT RCF::LogTarget * SWIGSTDCALL CSharp_LogToEventLog_SWIGUpcast(RCF::LogToEventLog *jarg1) {
    return (RCF::LogTarget *)jarg1;
}

SWIGEXPORT RCF::LogTarget * SWIGSTDCALL CSharp_LogToFile_SWIGUpcast(RCF::LogToFile *jarg1) {
    return (RCF::LogTarget *)jarg1;
}

SWIGEXPORT boost::shared_ptr< RCF::Certificate > * SWIGSTDCALL CSharp_PemCertificate_SWIGSmartPtrUpcast(boost::shared_ptr< RCF::PemCertificate > *jarg1) {
    return jarg1 ? new boost::shared_ptr< RCF::Certificate >(*jarg1) : 0;
}

SWIGEXPORT boost::shared_ptr< RCF::Certificate > * SWIGSTDCALL CSharp_X509Certificate_SWIGSmartPtrUpcast(boost::shared_ptr< RCF::X509Certificate > *jarg1) {
    return jarg1 ? new boost::shared_ptr< RCF::Certificate >(*jarg1) : 0;
}

SWIGEXPORT boost::shared_ptr< RCF::Certificate > * SWIGSTDCALL CSharp_Win32Certificate_SWIGSmartPtrUpcast(boost::shared_ptr< RCF::Win32Certificate > *jarg1) {
    return jarg1 ? new boost::shared_ptr< RCF::Certificate >(*jarg1) : 0;
}

SWIGEXPORT boost::shared_ptr< RCF::Win32Certificate > * SWIGSTDCALL CSharp_PfxCertificate_SWIGSmartPtrUpcast(boost::shared_ptr< RCF::PfxCertificate > *jarg1) {
    return jarg1 ? new boost::shared_ptr< RCF::Win32Certificate >(*jarg1) : 0;
}

SWIGEXPORT boost::shared_ptr< RCF::Win32Certificate > * SWIGSTDCALL CSharp_StoreCertificate_SWIGSmartPtrUpcast(boost::shared_ptr< RCF::StoreCertificate > *jarg1) {
    return jarg1 ? new boost::shared_ptr< RCF::Win32Certificate >(*jarg1) : 0;
}

SWIGEXPORT RCF::Endpoint * SWIGSTDCALL CSharp_TcpEndpoint_SWIGUpcast(RCF::TcpEndpoint *jarg1) {
    return (RCF::Endpoint *)jarg1;
}

SWIGEXPORT RCF::Endpoint * SWIGSTDCALL CSharp_Win32NamedPipeEndpoint_SWIGUpcast(RCF::Win32NamedPipeEndpoint *jarg1) {
    return (RCF::Endpoint *)jarg1;
}

SWIGEXPORT RCF::Endpoint * SWIGSTDCALL CSharp_UnixLocalEndpoint_SWIGUpcast(RCF::UnixLocalEndpoint *jarg1) {
    return (RCF::Endpoint *)jarg1;
}

SWIGEXPORT RCF::TcpEndpoint * SWIGSTDCALL CSharp_HttpEndpoint_SWIGUpcast(RCF::HttpEndpoint *jarg1) {
    return (RCF::TcpEndpoint *)jarg1;
}

SWIGEXPORT RCF::TcpEndpoint * SWIGSTDCALL CSharp_HttpsEndpoint_SWIGUpcast(RCF::HttpsEndpoint *jarg1) {
    return (RCF::TcpEndpoint *)jarg1;
}

#ifdef __cplusplus
}
#endif

