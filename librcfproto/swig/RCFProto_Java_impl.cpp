/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global;
        if (jobj)
          jthis_ = ((weak_global_ || !mem_own) ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj));
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0) {
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon((void **) &jenv_, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread((void **) &jenv_, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.peek();
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_RCFProtoJNI = NULL;
    jmethodID director_methids[3];
  }
}

#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include <stdint.h>		// Use the C99 official header


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include "RCFProto.hpp"

SWIGINTERN std::vector< enum RCF::TransportProtocol >::const_reference std_vector_Sl_RCF_TransportProtocol_Sg__get(std::vector< RCF::TransportProtocol > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_RCF_TransportProtocol_Sg__set(std::vector< RCF::TransportProtocol > *self,int i,std::vector< enum RCF::TransportProtocol >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "RCFProto_Java_impl.h"

SwigDirector__SwigCallback::SwigDirector__SwigCallback(JNIEnv *jenv) : RCF::_SwigCallback(), Swig::Director(jenv) {
}

SwigDirector__SwigCallback::~SwigDirector__SwigCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector__SwigCallback::Run() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    RCF::_SwigCallback::Run();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_RCFProtoJNI, Swig::director_methids[0], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector__SwigCallback::ProtoRpcBegin(RCF::_SwigCallbackArgs *args, RCF::RcfProtoServer *server, RCF::RcfProtoSession *context, std::string const &serviceName, int methodId) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jargs = 0 ;
  jlong jserver = 0 ;
  jlong jcontext = 0 ;
  jstring jserviceName = 0 ;
  jint jmethodId  ;
  
  if (!swig_override[1]) {
    RCF::_SwigCallback::ProtoRpcBegin(args,server,context,serviceName,methodId);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((RCF::_SwigCallbackArgs **)&jargs) = (RCF::_SwigCallbackArgs *) args; 
    *((RCF::RcfProtoServer **)&jserver) = (RCF::RcfProtoServer *) server; 
    *((RCF::RcfProtoSession **)&jcontext) = (RCF::RcfProtoSession *) context; 
    jserviceName = jenv->NewStringUTF((&serviceName)->c_str()); 
    jmethodId = (jint) methodId;
    jenv->CallStaticVoidMethod(Swig::jclass_RCFProtoJNI, Swig::director_methids[1], swigjobj, jargs, jserver, jcontext, jserviceName, jmethodId);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector__SwigCallback::ValidateCertificate(RCF::_SwigCallbackArgs *args) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jargs = 0 ;
  
  if (!swig_override[2]) {
    return RCF::_SwigCallback::ValidateCertificate(args);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((RCF::_SwigCallbackArgs **)&jargs) = (RCF::_SwigCallbackArgs *) args; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_RCFProtoJNI, Swig::director_methids[2], swigjobj, jargs);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector__SwigCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "Run", "()V", NULL 
    },
    {
      "ProtoRpcBegin", "(Lcom/deltavsoft/rcfproto/_SwigCallbackArgs;Lcom/deltavsoft/rcfproto/RcfProtoServer;Lcom/deltavsoft/rcfproto/RcfProtoSession;Ljava/lang/String;I)V", NULL 
    },
    {
      "ValidateCertificate", "(Lcom/deltavsoft/rcfproto/_SwigCallbackArgs;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/deltavsoft/rcfproto/_SwigCallback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1TransportProtocolList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< RCF::TransportProtocol > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try 
    {
      result = (std::vector< RCF::TransportProtocol > *)new std::vector< RCF::TransportProtocol >();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(std::vector< RCF::TransportProtocol > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1TransportProtocolList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum RCF::TransportProtocol >::size_type arg1 ;
  std::vector< RCF::TransportProtocol > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum RCF::TransportProtocol >::size_type)jarg1; 
  {
    try 
    {
      result = (std::vector< RCF::TransportProtocol > *)new std::vector< RCF::TransportProtocol >(arg1);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(std::vector< RCF::TransportProtocol > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_TransportProtocolList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  std::vector< enum RCF::TransportProtocol >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RCF::TransportProtocol > **)&jarg1; 
  {
    try 
    {
      result = ((std::vector< RCF::TransportProtocol > const *)arg1)->size();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_TransportProtocolList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  std::vector< enum RCF::TransportProtocol >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RCF::TransportProtocol > **)&jarg1; 
  {
    try 
    {
      result = ((std::vector< RCF::TransportProtocol > const *)arg1)->capacity();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_TransportProtocolList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  std::vector< enum RCF::TransportProtocol >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RCF::TransportProtocol > **)&jarg1; 
  arg2 = (std::vector< enum RCF::TransportProtocol >::size_type)jarg2; 
  {
    try 
    {
      (arg1)->reserve(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_TransportProtocolList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RCF::TransportProtocol > **)&jarg1; 
  {
    try 
    {
      result = (bool)((std::vector< RCF::TransportProtocol > const *)arg1)->empty();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_TransportProtocolList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RCF::TransportProtocol > **)&jarg1; 
  {
    try 
    {
      (arg1)->clear();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_TransportProtocolList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  std::vector< enum RCF::TransportProtocol >::value_type *arg2 = 0 ;
  std::vector< enum RCF::TransportProtocol >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RCF::TransportProtocol > **)&jarg1; 
  temp2 = (std::vector< enum RCF::TransportProtocol >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try 
    {
      (arg1)->push_back((std::vector< enum RCF::TransportProtocol >::value_type const &)*arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_TransportProtocolList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  int arg2 ;
  std::vector< enum RCF::TransportProtocol >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RCF::TransportProtocol > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try 
    {
      try {
        result = (std::vector< enum RCF::TransportProtocol >::value_type *) &std_vector_Sl_RCF_TransportProtocol_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_TransportProtocolList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  int arg2 ;
  std::vector< enum RCF::TransportProtocol >::value_type *arg3 = 0 ;
  std::vector< enum RCF::TransportProtocol >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RCF::TransportProtocol > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum RCF::TransportProtocol >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try 
    {
      try {
        std_vector_Sl_RCF_TransportProtocol_Sg__set(arg1,arg2,(enum RCF::TransportProtocol const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1TransportProtocolList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< RCF::TransportProtocol > *arg1 = (std::vector< RCF::TransportProtocol > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< RCF::TransportProtocol > **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_init(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    try 
    {
      RCF::init();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_deinit(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    try 
    {
      RCF::deinit();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_isProBuild(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  {
    try 
    {
      result = (bool)RCF::isProBuild();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1LogTarget(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::LogTarget *arg1 = (RCF::LogTarget *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::LogTarget **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1LogToStdout(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RCF::LogToStdout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try 
    {
      result = (RCF::LogToStdout *)new RCF::LogToStdout();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::LogToStdout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1LogToStdout(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::LogToStdout *arg1 = (RCF::LogToStdout *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::LogToStdout **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1LogToDebugWindow(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RCF::LogToDebugWindow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try 
    {
      result = (RCF::LogToDebugWindow *)new RCF::LogToDebugWindow();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::LogToDebugWindow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1LogToDebugWindow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::LogToDebugWindow *arg1 = (RCF::LogToDebugWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::LogToDebugWindow **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1LogToEventLog(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  RCF::LogToEventLog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  {
    try 
    {
      result = (RCF::LogToEventLog *)new RCF::LogToEventLog((std::string const &)*arg1,arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::LogToEventLog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1LogToEventLog(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::LogToEventLog *arg1 = (RCF::LogToEventLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::LogToEventLog **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1LogToFile(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  RCF::LogToFile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  {
    try 
    {
      result = (RCF::LogToFile *)new RCF::LogToFile((std::string const &)*arg1,arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::LogToFile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1LogToFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::LogToFile *arg1 = (RCF::LogToFile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::LogToFile **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_enableLogging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  RCF::LogTarget *arg1 = 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::LogTarget **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RCF::LogTarget const & reference is null");
    return ;
  } 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try 
    {
      RCF::enableLogging((RCF::LogTarget const &)*arg1,arg2,(std::string const &)*arg3);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_disableLogging(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    try 
    {
      RCF::disableLogging();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_Certificate_1_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RCF::Certificate *arg1 = (RCF::Certificate *) 0 ;
  boost::shared_ptr< RCF::Certificate > *smartarg1 = 0 ;
  RCF::CertificateImplementationType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RCF::Certificate > **)&jarg1;
  arg1 = (RCF::Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = (RCF::CertificateImplementationType)(arg1)->_getType();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_Certificate_1_1downcastToWin32Certificate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RCF::Certificate *arg1 = (RCF::Certificate *) 0 ;
  RCF::CertificatePtr arg2 ;
  boost::shared_ptr< RCF::Certificate > *smartarg1 = 0 ;
  RCF::CertificatePtr *argp2 ;
  RCF::Win32CertificatePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RCF::Certificate > **)&jarg1;
  arg1 = (RCF::Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(RCF::CertificatePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try 
    {
      result = (arg1)->_downcastToWin32Certificate(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::Win32CertificatePtr **)&jresult = result ? new RCF::Win32CertificatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_Certificate_1_1downcastToX509Certificate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RCF::Certificate *arg1 = (RCF::Certificate *) 0 ;
  RCF::CertificatePtr arg2 ;
  boost::shared_ptr< RCF::Certificate > *smartarg1 = 0 ;
  RCF::CertificatePtr *argp2 ;
  RCF::X509CertificatePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RCF::Certificate > **)&jarg1;
  arg1 = (RCF::Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(RCF::CertificatePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try 
    {
      result = (arg1)->_downcastToX509Certificate(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::X509CertificatePtr **)&jresult = result ? new RCF::X509CertificatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1Certificate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::Certificate *arg1 = (RCF::Certificate *) 0 ;
  boost::shared_ptr< RCF::Certificate > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RCF::Certificate > **)&jarg1;
  arg1 = (RCF::Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      (void)arg1; delete smartarg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1PemCertificate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  RCF::PemCertificate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try 
    {
      result = (RCF::PemCertificate *)new RCF::PemCertificate((std::string const &)*arg1,(std::string const &)*arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RCF::PemCertificate > **)&jresult = result ? new boost::shared_ptr<  RCF::PemCertificate >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1PemCertificate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  RCF::PemCertificate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try 
    {
      result = (RCF::PemCertificate *)new RCF::PemCertificate((std::string const &)*arg1);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RCF::PemCertificate > **)&jresult = result ? new boost::shared_ptr<  RCF::PemCertificate >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1PemCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::PemCertificate *arg1 = (RCF::PemCertificate *) 0 ;
  boost::shared_ptr< RCF::PemCertificate > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RCF::PemCertificate > **)&jarg1;
  arg1 = (RCF::PemCertificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      (void)arg1; delete smartarg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_X509Certificate_1_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RCF::X509Certificate *arg1 = (RCF::X509Certificate *) 0 ;
  boost::shared_ptr< RCF::X509Certificate > *smartarg1 = 0 ;
  RCF::CertificateImplementationType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RCF::X509Certificate > **)&jarg1;
  arg1 = (RCF::X509Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = (RCF::CertificateImplementationType)(arg1)->_getType();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_X509Certificate_1getCertificateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::X509Certificate *arg1 = (RCF::X509Certificate *) 0 ;
  boost::shared_ptr< RCF::X509Certificate > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RCF::X509Certificate > **)&jarg1;
  arg1 = (RCF::X509Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = (arg1)->getCertificateName();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_X509Certificate_1getIssuerName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::X509Certificate *arg1 = (RCF::X509Certificate *) 0 ;
  boost::shared_ptr< RCF::X509Certificate > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RCF::X509Certificate > **)&jarg1;
  arg1 = (RCF::X509Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = (arg1)->getIssuerName();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1X509Certificate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::X509Certificate *arg1 = (RCF::X509Certificate *) 0 ;
  boost::shared_ptr< RCF::X509Certificate > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RCF::X509Certificate > **)&jarg1;
  arg1 = (RCF::X509Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      (void)arg1; delete smartarg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_Win32Certificate_1_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RCF::Win32Certificate *arg1 = (RCF::Win32Certificate *) 0 ;
  boost::shared_ptr< RCF::Win32Certificate > *smartarg1 = 0 ;
  RCF::CertificateImplementationType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RCF::Win32Certificate > **)&jarg1;
  arg1 = (RCF::Win32Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = (RCF::CertificateImplementationType)(arg1)->_getType();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_Win32Certificate_1getCertificateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::Win32Certificate *arg1 = (RCF::Win32Certificate *) 0 ;
  boost::shared_ptr< RCF::Win32Certificate > *smartarg1 = 0 ;
  RCF::tstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RCF::Win32Certificate > **)&jarg1;
  arg1 = (RCF::Win32Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = (arg1)->getCertificateName();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_Win32Certificate_1getIssuerName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::Win32Certificate *arg1 = (RCF::Win32Certificate *) 0 ;
  boost::shared_ptr< RCF::Win32Certificate > *smartarg1 = 0 ;
  RCF::tstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RCF::Win32Certificate > **)&jarg1;
  arg1 = (RCF::Win32Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = (arg1)->getIssuerName();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_Win32Certificate_1exportToPfx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RCF::Win32Certificate *arg1 = (RCF::Win32Certificate *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RCF::Win32Certificate > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RCF::Win32Certificate > **)&jarg1;
  arg1 = (RCF::Win32Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try 
    {
      (arg1)->exportToPfx((std::string const &)*arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_Win32Certificate_1findRootCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  RCF::Win32Certificate *arg1 = (RCF::Win32Certificate *) 0 ;
  RCF::Win32CertificateLocation arg2 ;
  RCF::Win32CertificateStore arg3 ;
  boost::shared_ptr< RCF::Win32Certificate > *smartarg1 = 0 ;
  RCF::Win32CertificatePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RCF::Win32Certificate > **)&jarg1;
  arg1 = (RCF::Win32Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (RCF::Win32CertificateLocation)jarg2; 
  arg3 = (RCF::Win32CertificateStore)jarg3; 
  {
    try 
    {
      result = (arg1)->findRootCertificate(arg2,arg3);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::Win32CertificatePtr **)&jresult = result ? new RCF::Win32CertificatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1Win32Certificate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::Win32Certificate *arg1 = (RCF::Win32Certificate *) 0 ;
  boost::shared_ptr< RCF::Win32Certificate > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RCF::Win32Certificate > **)&jarg1;
  arg1 = (RCF::Win32Certificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      (void)arg1; delete smartarg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1PfxCertificate(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  RCF::tstring *arg2 = 0 ;
  RCF::tstring *arg3 = 0 ;
  RCF::PfxCertificate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  {
    try 
    {
      result = (RCF::PfxCertificate *)new RCF::PfxCertificate((std::string const &)*arg1,(RCF::tstring const &)*arg2,(RCF::tstring const &)*arg3);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RCF::PfxCertificate > **)&jresult = result ? new boost::shared_ptr<  RCF::PfxCertificate >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_PfxCertificate_1addToStore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  RCF::PfxCertificate *arg1 = (RCF::PfxCertificate *) 0 ;
  RCF::Win32CertificateLocation arg2 ;
  RCF::Win32CertificateStore arg3 ;
  boost::shared_ptr< RCF::PfxCertificate > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RCF::PfxCertificate > **)&jarg1;
  arg1 = (RCF::PfxCertificate *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (RCF::Win32CertificateLocation)jarg2; 
  arg3 = (RCF::Win32CertificateStore)jarg3; 
  {
    try 
    {
      (arg1)->addToStore(arg2,arg3);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1PfxCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::PfxCertificate *arg1 = (RCF::PfxCertificate *) 0 ;
  boost::shared_ptr< RCF::PfxCertificate > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RCF::PfxCertificate > **)&jarg1;
  arg1 = (RCF::PfxCertificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      (void)arg1; delete smartarg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1StoreCertificate(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  RCF::Win32CertificateLocation arg1 ;
  RCF::Win32CertificateStore arg2 ;
  RCF::tstring *arg3 = 0 ;
  RCF::StoreCertificate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (RCF::Win32CertificateLocation)jarg1; 
  arg2 = (RCF::Win32CertificateStore)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  {
    try 
    {
      result = (RCF::StoreCertificate *)new RCF::StoreCertificate(arg1,arg2,(RCF::tstring const &)*arg3);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RCF::StoreCertificate > **)&jresult = result ? new boost::shared_ptr<  RCF::StoreCertificate >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_StoreCertificate_1removeFromStore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RCF::StoreCertificate *arg1 = (RCF::StoreCertificate *) 0 ;
  boost::shared_ptr< RCF::StoreCertificate > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RCF::StoreCertificate > **)&jarg1;
  arg1 = (RCF::StoreCertificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      (arg1)->removeFromStore();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1StoreCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::StoreCertificate *arg1 = (RCF::StoreCertificate *) 0 ;
  boost::shared_ptr< RCF::StoreCertificate > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RCF::StoreCertificate > **)&jarg1;
  arg1 = (RCF::StoreCertificate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      (void)arg1; delete smartarg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1StoreCertificateIterator(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  RCF::Win32CertificateLocation arg1 ;
  RCF::Win32CertificateStore arg2 ;
  RCF::StoreCertificateIterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (RCF::Win32CertificateLocation)jarg1; 
  arg2 = (RCF::Win32CertificateStore)jarg2; 
  {
    try 
    {
      result = (RCF::StoreCertificateIterator *)new RCF::StoreCertificateIterator(arg1,arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::StoreCertificateIterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_StoreCertificateIterator_1moveNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RCF::StoreCertificateIterator *arg1 = (RCF::StoreCertificateIterator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::StoreCertificateIterator **)&jarg1; 
  {
    try 
    {
      result = (bool)(arg1)->moveNext();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_StoreCertificateIterator_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RCF::StoreCertificateIterator *arg1 = (RCF::StoreCertificateIterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::StoreCertificateIterator **)&jarg1; 
  {
    try 
    {
      (arg1)->reset();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_StoreCertificateIterator_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::StoreCertificateIterator *arg1 = (RCF::StoreCertificateIterator *) 0 ;
  RCF::Win32CertificatePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::StoreCertificateIterator **)&jarg1; 
  {
    try 
    {
      result = (arg1)->current();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::Win32CertificatePtr **)&jresult = result ? new RCF::Win32CertificatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1StoreCertificateIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::StoreCertificateIterator *arg1 = (RCF::StoreCertificateIterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::StoreCertificateIterator **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_setDefaultSslImplementation(JNIEnv *jenv, jclass jcls, jint jarg1) {
  RCF::SslImplementation arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (RCF::SslImplementation)jarg1; 
  {
    try 
    {
      RCF::setDefaultSslImplementation(arg1);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_getDefaultSslImplementation(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  RCF::SslImplementation result;
  
  (void)jenv;
  (void)jcls;
  {
    try 
    {
      result = (RCF::SslImplementation)RCF::getDefaultSslImplementation();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1IpAddress_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  RCF::IpAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try 
    {
      result = (RCF::IpAddress *)new RCF::IpAddress((std::string const &)*arg1);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::IpAddress **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1IpAddress_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  RCF::IpAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  {
    try 
    {
      result = (RCF::IpAddress *)new RCF::IpAddress((std::string const &)*arg1,arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::IpAddress **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1IpAddress(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::IpAddress *arg1 = (RCF::IpAddress *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::IpAddress **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1ThreadPool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::size_t arg1 ;
  RCF::ThreadPool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::size_t)jarg1; 
  {
    try 
    {
      result = (RCF::ThreadPool *)new RCF::ThreadPool(arg1);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RCF::ThreadPool > **)&jresult = result ? new boost::shared_ptr<  RCF::ThreadPool >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1ThreadPool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::size_t arg1 ;
  std::size_t arg2 ;
  RCF::ThreadPool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::size_t)jarg1; 
  arg2 = (std::size_t)jarg2; 
  {
    try 
    {
      result = (RCF::ThreadPool *)new RCF::ThreadPool(arg1,arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RCF::ThreadPool > **)&jresult = result ? new boost::shared_ptr<  RCF::ThreadPool >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ThreadPool_1setThreadMinCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  std::size_t arg2 ;
  boost::shared_ptr< RCF::ThreadPool > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RCF::ThreadPool > **)&jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::size_t)jarg2; 
  {
    try 
    {
      (arg1)->setThreadMinCount(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ThreadPool_1getThreadMinCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  boost::shared_ptr< RCF::ThreadPool const > *smartarg1 = 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const RCF::ThreadPool > **)&jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = ((RCF::ThreadPool const *)arg1)->getThreadMinCount();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ThreadPool_1setThreadMaxCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  std::size_t arg2 ;
  boost::shared_ptr< RCF::ThreadPool > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RCF::ThreadPool > **)&jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::size_t)jarg2; 
  {
    try 
    {
      (arg1)->setThreadMaxCount(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ThreadPool_1getThreadMaxCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  boost::shared_ptr< RCF::ThreadPool const > *smartarg1 = 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const RCF::ThreadPool > **)&jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = ((RCF::ThreadPool const *)arg1)->getThreadMaxCount();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ThreadPool_1setThreadIdleTimeoutMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  boost::uint32_t arg2 ;
  boost::shared_ptr< RCF::ThreadPool > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RCF::ThreadPool > **)&jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (boost::uint32_t)jarg2; 
  {
    try 
    {
      (arg1)->setThreadIdleTimeoutMs(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ThreadPool_1getThreadIdleTimeoutMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  boost::shared_ptr< RCF::ThreadPool const > *smartarg1 = 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const RCF::ThreadPool > **)&jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = (boost::uint32_t)((RCF::ThreadPool const *)arg1)->getThreadIdleTimeoutMs();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ThreadPool_1setReserveLastThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RCF::ThreadPool > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RCF::ThreadPool > **)&jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try 
    {
      (arg1)->setReserveLastThread(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ThreadPool_1getReserveLastThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  boost::shared_ptr< RCF::ThreadPool const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const RCF::ThreadPool > **)&jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = (bool)((RCF::ThreadPool const *)arg1)->getReserveLastThread();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ThreadPool_1setThreadName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RCF::ThreadPool > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RCF::ThreadPool > **)&jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try 
    {
      (arg1)->setThreadName((std::string const &)*arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ThreadPool_1getThreadName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  boost::shared_ptr< RCF::ThreadPool const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const RCF::ThreadPool > **)&jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      result = ((RCF::ThreadPool const *)arg1)->getThreadName();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1ThreadPool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::ThreadPool *arg1 = (RCF::ThreadPool *) 0 ;
  boost::shared_ptr< RCF::ThreadPool > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RCF::ThreadPool > **)&jarg1;
  arg1 = (RCF::ThreadPool *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try 
    {
      (void)arg1; delete smartarg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1Endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::Endpoint *arg1 = (RCF::Endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::Endpoint **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1TcpEndpoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  RCF::TcpEndpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try 
    {
      result = (RCF::TcpEndpoint *)new RCF::TcpEndpoint(arg1);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::TcpEndpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1TcpEndpoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  RCF::TcpEndpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  {
    try 
    {
      result = (RCF::TcpEndpoint *)new RCF::TcpEndpoint((std::string const &)*arg1,arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::TcpEndpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_TcpEndpoint_1getIp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::TcpEndpoint *arg1 = (RCF::TcpEndpoint *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::TcpEndpoint **)&jarg1; 
  {
    try 
    {
      result = ((RCF::TcpEndpoint const *)arg1)->getIp();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_TcpEndpoint_1getPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RCF::TcpEndpoint *arg1 = (RCF::TcpEndpoint *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::TcpEndpoint **)&jarg1; 
  {
    try 
    {
      result = (int)((RCF::TcpEndpoint const *)arg1)->getPort();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_TcpEndpoint_1asString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::TcpEndpoint *arg1 = (RCF::TcpEndpoint *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::TcpEndpoint **)&jarg1; 
  {
    try 
    {
      result = ((RCF::TcpEndpoint const *)arg1)->asString();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1TcpEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::TcpEndpoint *arg1 = (RCF::TcpEndpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::TcpEndpoint **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1Win32NamedPipeEndpoint(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  RCF::tstring *arg1 = 0 ;
  RCF::Win32NamedPipeEndpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  {
    try 
    {
      result = (RCF::Win32NamedPipeEndpoint *)new RCF::Win32NamedPipeEndpoint((RCF::tstring const &)*arg1);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::Win32NamedPipeEndpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1Win32NamedPipeEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::Win32NamedPipeEndpoint *arg1 = (RCF::Win32NamedPipeEndpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::Win32NamedPipeEndpoint **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1UnixLocalEndpoint(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  RCF::UnixLocalEndpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try 
    {
      result = (RCF::UnixLocalEndpoint *)new RCF::UnixLocalEndpoint((std::string const &)*arg1);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::UnixLocalEndpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1UnixLocalEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::UnixLocalEndpoint *arg1 = (RCF::UnixLocalEndpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::UnixLocalEndpoint **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1HttpEndpoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  RCF::HttpEndpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try 
    {
      result = (RCF::HttpEndpoint *)new RCF::HttpEndpoint(arg1);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::HttpEndpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1HttpEndpoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  RCF::HttpEndpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  {
    try 
    {
      result = (RCF::HttpEndpoint *)new RCF::HttpEndpoint((std::string const &)*arg1,arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::HttpEndpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1HttpEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::HttpEndpoint *arg1 = (RCF::HttpEndpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::HttpEndpoint **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1HttpsEndpoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  RCF::HttpsEndpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try 
    {
      result = (RCF::HttpsEndpoint *)new RCF::HttpsEndpoint(arg1);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::HttpsEndpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1HttpsEndpoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  RCF::HttpsEndpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  {
    try 
    {
      result = (RCF::HttpsEndpoint *)new RCF::HttpsEndpoint((std::string const &)*arg1,arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::HttpsEndpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1HttpsEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::HttpsEndpoint *arg1 = (RCF::HttpsEndpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::HttpsEndpoint **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ServerTransport_1getTransportType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  RCF::TransportType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::ServerTransport **)&jarg1; 
  {
    try 
    {
      result = (RCF::TransportType)(arg1)->getTransportType();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ServerTransport_1setMaxIncomingMessageLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  std::size_t arg2 ;
  RCF::ServerTransport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::ServerTransport **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  {
    try 
    {
      result = (RCF::ServerTransport *) &(arg1)->setMaxIncomingMessageLength(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::ServerTransport **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ServerTransport_1getMaxIncomingMessageLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::ServerTransport **)&jarg1; 
  {
    try 
    {
      result = ((RCF::ServerTransport const *)arg1)->getMaxIncomingMessageLength();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ServerTransport_1setConnectionLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  std::size_t arg2 ;
  RCF::ServerTransport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::ServerTransport **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  {
    try 
    {
      result = (RCF::ServerTransport *) &(arg1)->setConnectionLimit(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::ServerTransport **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ServerTransport_1getConnectionLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::ServerTransport **)&jarg1; 
  {
    try 
    {
      result = ((RCF::ServerTransport const *)arg1)->getConnectionLimit();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ServerTransport_1setInitialNumberOfConnections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  std::size_t arg2 ;
  RCF::ServerTransport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::ServerTransport **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  {
    try 
    {
      result = (RCF::ServerTransport *) &(arg1)->setInitialNumberOfConnections(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::ServerTransport **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ServerTransport_1getInitialNumberOfConnections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::ServerTransport **)&jarg1; 
  {
    try 
    {
      result = ((RCF::ServerTransport const *)arg1)->getInitialNumberOfConnections();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ServerTransport_1setThreadPool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  RCF::ThreadPoolPtr arg2 ;
  RCF::ThreadPoolPtr *argp2 ;
  RCF::ServerTransport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RCF::ServerTransport **)&jarg1; 
  argp2 = *(RCF::ThreadPoolPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try 
    {
      result = (RCF::ServerTransport *) &(arg1)->setThreadPool(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::ServerTransport **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ServerTransport_1setSupportedProtocols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  std::vector< RCF::TransportProtocol > *arg2 = 0 ;
  RCF::ServerTransport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RCF::ServerTransport **)&jarg1; 
  arg2 = *(std::vector< RCF::TransportProtocol > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RCF::TransportProtocol > const & reference is null");
    return 0;
  } 
  {
    try 
    {
      result = (RCF::ServerTransport *) &(arg1)->setSupportedProtocols((std::vector< RCF::TransportProtocol > const &)*arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::ServerTransport **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ServerTransport_1getSupportedProtocols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  std::vector< RCF::TransportProtocol > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::ServerTransport **)&jarg1; 
  {
    try 
    {
      result = (std::vector< RCF::TransportProtocol > *) &((RCF::ServerTransport const *)arg1)->getSupportedProtocols();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(std::vector< RCF::TransportProtocol > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1ServerTransport(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::ServerTransport *arg1 = (RCF::ServerTransport *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::ServerTransport **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ClientTransport_1getTransportType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RCF::ClientTransport *arg1 = (RCF::ClientTransport *) 0 ;
  RCF::TransportType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::ClientTransport **)&jarg1; 
  {
    try 
    {
      result = (RCF::TransportType)(arg1)->getTransportType();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ClientTransport_1setMaxIncomingMessageLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RCF::ClientTransport *arg1 = (RCF::ClientTransport *) 0 ;
  std::size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::ClientTransport **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  {
    try 
    {
      (arg1)->setMaxIncomingMessageLength(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ClientTransport_1getMaxIncomingMessageLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::ClientTransport *arg1 = (RCF::ClientTransport *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::ClientTransport **)&jarg1; 
  {
    try 
    {
      result = ((RCF::ClientTransport const *)arg1)->getMaxIncomingMessageLength();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ClientTransport_1getLastRequestSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::ClientTransport *arg1 = (RCF::ClientTransport *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::ClientTransport **)&jarg1; 
  {
    try 
    {
      result = (arg1)->getLastRequestSize();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ClientTransport_1getLastResponseSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::ClientTransport *arg1 = (RCF::ClientTransport *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::ClientTransport **)&jarg1; 
  {
    try 
    {
      result = (arg1)->getLastResponseSize();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ClientTransport_1getRunningTotalBytesSent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  RCF::ClientTransport *arg1 = (RCF::ClientTransport *) 0 ;
  boost::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::ClientTransport **)&jarg1; 
  {
    try 
    {
      result = (boost::uint64_t)(arg1)->getRunningTotalBytesSent();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ClientTransport_1getRunningTotalBytesReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  RCF::ClientTransport *arg1 = (RCF::ClientTransport *) 0 ;
  boost::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::ClientTransport **)&jarg1; 
  {
    try 
    {
      result = (boost::uint64_t)(arg1)->getRunningTotalBytesReceived();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_ClientTransport_1resetRunningTotals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RCF::ClientTransport *arg1 = (RCF::ClientTransport *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::ClientTransport **)&jarg1; 
  {
    try 
    {
      (arg1)->resetRunningTotals();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1ClientTransport(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::ClientTransport *arg1 = (RCF::ClientTransport *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::ClientTransport **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI__1SwigCallbackArgs_1mErrorString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RCF::_SwigCallbackArgs *arg1 = (RCF::_SwigCallbackArgs *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::_SwigCallbackArgs **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mErrorString = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI__1SwigCallbackArgs_1mErrorString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::_SwigCallbackArgs *arg1 = (RCF::_SwigCallbackArgs *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::_SwigCallbackArgs **)&jarg1; 
  result = (std::string *) & ((arg1)->mErrorString);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI__1SwigCallbackArgs_1mCertificatePtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RCF::_SwigCallbackArgs *arg1 = (RCF::_SwigCallbackArgs *) 0 ;
  RCF::CertificatePtr *arg2 = 0 ;
  RCF::CertificatePtr tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RCF::_SwigCallbackArgs **)&jarg1; 
  arg2 = jarg2 ? *(RCF::CertificatePtr **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->mCertificatePtr = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI__1SwigCallbackArgs_1mCertificatePtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::_SwigCallbackArgs *arg1 = (RCF::_SwigCallbackArgs *) 0 ;
  RCF::CertificatePtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::_SwigCallbackArgs **)&jarg1; 
  result = (RCF::CertificatePtr *) & ((arg1)->mCertificatePtr);
  *(RCF::CertificatePtr **)&jresult = *result ? new RCF::CertificatePtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1_1SwigCallbackArgs(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RCF::_SwigCallbackArgs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try 
    {
      result = (RCF::_SwigCallbackArgs *)new RCF::_SwigCallbackArgs();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::_SwigCallbackArgs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1_1SwigCallbackArgs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::_SwigCallbackArgs *arg1 = (RCF::_SwigCallbackArgs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::_SwigCallbackArgs **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1_1SwigCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RCF::_SwigCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try 
    {
      result = (RCF::_SwigCallback *)new SwigDirector__SwigCallback(jenv);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::_SwigCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1_1SwigCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::_SwigCallback *arg1 = (RCF::_SwigCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::_SwigCallback **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI__1SwigCallback_1Run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RCF::_SwigCallback *arg1 = (RCF::_SwigCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::_SwigCallback **)&jarg1; 
  {
    try 
    {
      (arg1)->Run();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI__1SwigCallback_1RunSwigExplicit_1SwigCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RCF::_SwigCallback *arg1 = (RCF::_SwigCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::_SwigCallback **)&jarg1; 
  {
    try 
    {
      (arg1)->RCF::_SwigCallback::Run();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI__1SwigCallback_1ProtoRpcBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jstring jarg5, jint jarg6) {
  RCF::_SwigCallback *arg1 = (RCF::_SwigCallback *) 0 ;
  RCF::_SwigCallbackArgs *arg2 = (RCF::_SwigCallbackArgs *) 0 ;
  RCF::RcfProtoServer *arg3 = (RCF::RcfProtoServer *) 0 ;
  RCF::RcfProtoSession *arg4 = (RCF::RcfProtoSession *) 0 ;
  std::string *arg5 = 0 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(RCF::_SwigCallback **)&jarg1; 
  arg2 = *(RCF::_SwigCallbackArgs **)&jarg2; 
  arg3 = *(RCF::RcfProtoServer **)&jarg3; 
  arg4 = *(RCF::RcfProtoSession **)&jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (int)jarg6; 
  {
    try 
    {
      (arg1)->ProtoRpcBegin(arg2,arg3,arg4,(std::string const &)*arg5,arg6);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI__1SwigCallback_1ProtoRpcBeginSwigExplicit_1SwigCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jstring jarg5, jint jarg6) {
  RCF::_SwigCallback *arg1 = (RCF::_SwigCallback *) 0 ;
  RCF::_SwigCallbackArgs *arg2 = (RCF::_SwigCallbackArgs *) 0 ;
  RCF::RcfProtoServer *arg3 = (RCF::RcfProtoServer *) 0 ;
  RCF::RcfProtoSession *arg4 = (RCF::RcfProtoSession *) 0 ;
  std::string *arg5 = 0 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(RCF::_SwigCallback **)&jarg1; 
  arg2 = *(RCF::_SwigCallbackArgs **)&jarg2; 
  arg3 = *(RCF::RcfProtoServer **)&jarg3; 
  arg4 = *(RCF::RcfProtoSession **)&jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (int)jarg6; 
  {
    try 
    {
      (arg1)->RCF::_SwigCallback::ProtoRpcBegin(arg2,arg3,arg4,(std::string const &)*arg5,arg6);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI__1SwigCallback_1ValidateCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RCF::_SwigCallback *arg1 = (RCF::_SwigCallback *) 0 ;
  RCF::_SwigCallbackArgs *arg2 = (RCF::_SwigCallbackArgs *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RCF::_SwigCallback **)&jarg1; 
  arg2 = *(RCF::_SwigCallbackArgs **)&jarg2; 
  {
    try 
    {
      result = (bool)(arg1)->ValidateCertificate(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI__1SwigCallback_1ValidateCertificateSwigExplicit_1SwigCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RCF::_SwigCallback *arg1 = (RCF::_SwigCallback *) 0 ;
  RCF::_SwigCallbackArgs *arg2 = (RCF::_SwigCallbackArgs *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RCF::_SwigCallback **)&jarg1; 
  arg2 = *(RCF::_SwigCallbackArgs **)&jarg2; 
  {
    try 
    {
      result = (bool)(arg1)->RCF::_SwigCallback::ValidateCertificate(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI__1SwigCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RCF::_SwigCallback *obj = *((RCF::_SwigCallback **)&objarg);
  (void)jcls;
  SwigDirector__SwigCallback *director = dynamic_cast<SwigDirector__SwigCallback *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI__1SwigCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RCF::_SwigCallback *obj = *((RCF::_SwigCallback **)&objarg);
  SwigDirector__SwigCallback *director = dynamic_cast<SwigDirector__SwigCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1_1CallMethodSwig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jbyteArray jarg4, jlong jarg6, jobject jarg6_) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  size_t arg5 ;
  RCF::_SwigCallback *arg6 = (RCF::_SwigCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  {
    arg4 = (char *) jenv->GetByteArrayElements(jarg4, 0);
    arg5 = (size_t) jenv->GetArrayLength(jarg4);
  }
  arg6 = *(RCF::_SwigCallback **)&jarg6; 
  {
    try 
    {
      (arg1)->_CallMethodSwig((std::string const &)*arg2,arg3,arg4,arg5,arg6);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
  {
    jenv->ReleaseByteArrayElements(jarg4, (jbyte *)arg4, 0);
  }
  
}


SWIGEXPORT jint JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1_1GetResponseBufferLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = (int)((RCF::RcfProtoChannel const *)arg1)->_GetResponseBufferLength();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1_1GetResponseBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
    arg3 = (size_t) jenv->GetArrayLength(jarg2);
  }
  {
    try 
    {
      ((RCF::RcfProtoChannel const *)arg1)->_GetResponseBuffer(arg2,arg3);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1RcfProtoChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::Endpoint *arg1 = 0 ;
  RCF::RcfProtoChannel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::Endpoint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RCF::Endpoint const & reference is null");
    return 0;
  } 
  {
    try 
    {
      result = (RCF::RcfProtoChannel *)new RCF::RcfProtoChannel((RCF::Endpoint const &)*arg1);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::RcfProtoChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1_1CallMethodSwig_1WithCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  RCF::_SwigCallback *arg5 = (RCF::_SwigCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(RCF::_SwigCallback **)&jarg5; 
  {
    try 
    {
      (arg1)->_CallMethodSwig_WithCopy((std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1_1GetResponseBuffer_1WithCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = ((RCF::RcfProtoChannel const *)arg1)->_GetResponseBuffer_WithCopy();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1Failed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = (bool)(arg1)->Failed();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1ErrorText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = (arg1)->ErrorText();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1StartCancel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      (arg1)->StartCancel();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1Completed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = (bool)(arg1)->Completed();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      (arg1)->connect();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      (arg1)->disconnect();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1setRemoteCallTimeoutMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try 
    {
      (arg1)->setRemoteCallTimeoutMs(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1getRemoteCallTimeoutMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = (unsigned int)((RCF::RcfProtoChannel const *)arg1)->getRemoteCallTimeoutMs();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1setConnectTimeoutMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try 
    {
      (arg1)->setConnectTimeoutMs(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1getConnectTimeoutMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = (unsigned int)((RCF::RcfProtoChannel const *)arg1)->getConnectTimeoutMs();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1setTransportProtocol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::TransportProtocol arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  arg2 = (RCF::TransportProtocol)jarg2; 
  {
    try 
    {
      (arg1)->setTransportProtocol(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1getTransportProtocol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::TransportProtocol result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = (RCF::TransportProtocol)(arg1)->getTransportProtocol();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1setAsynchronousRpcMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try 
    {
      (arg1)->setAsynchronousRpcMode(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1getAsynchronousRpcMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = (bool)(arg1)->getAsynchronousRpcMode();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1setPingBackIntervalMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try 
    {
      (arg1)->setPingBackIntervalMs(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1getPingBackIntervalMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = (int)(arg1)->getPingBackIntervalMs();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1setHttpProxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try 
    {
      (arg1)->setHttpProxy((std::string const &)*arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1getHttpProxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = (arg1)->getHttpProxy();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1setHttpProxyPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try 
    {
      (arg1)->setHttpProxyPort(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1getHttpProxyPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = (int)(arg1)->getHttpProxyPort();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1getTransportType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::TransportType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = (RCF::TransportType)(arg1)->getTransportType();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1setUsername(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::tstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try 
    {
      (arg1)->setUsername((RCF::tstring const &)*arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1getUsername(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::tstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = (arg1)->getUsername();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1setPassword(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::tstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try 
    {
      (arg1)->setPassword((RCF::tstring const &)*arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1getPassword(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::tstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = (arg1)->getPassword();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1setKerberosSpn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::tstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try 
    {
      (arg1)->setKerberosSpn((RCF::tstring const &)*arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1getKerberosSpn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::tstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = (arg1)->getKerberosSpn();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1setEnableCompression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try 
    {
      (arg1)->setEnableCompression(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1getEnableCompression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = (bool)(arg1)->getEnableCompression();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1setCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::CertificatePtr arg2 ;
  RCF::CertificatePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  argp2 = *(RCF::CertificatePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try 
    {
      (arg1)->setCertificate(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1getCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::CertificatePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = (arg1)->getCertificate();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::CertificatePtr **)&jresult = result ? new RCF::CertificatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1setCaCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::CertificatePtr arg2 ;
  RCF::CertificatePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  argp2 = *(RCF::CertificatePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try 
    {
      (arg1)->setCaCertificate(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1getCaCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::CertificatePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = (arg1)->getCaCertificate();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::CertificatePtr **)&jresult = result ? new RCF::CertificatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1setOpenSslCipherSuite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try 
    {
      (arg1)->setOpenSslCipherSuite((std::string const &)*arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1getOpenSslCipherSuite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = ((RCF::RcfProtoChannel const *)arg1)->getOpenSslCipherSuite();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1setEnableSchannelCertificateValidation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::tstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try 
    {
      (arg1)->setEnableSchannelCertificateValidation((RCF::tstring const &)*arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1getEnableSchannelCertificateValidation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::tstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = ((RCF::RcfProtoChannel const *)arg1)->getEnableSchannelCertificateValidation();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1_1setCertificateValidationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::_SwigCallback *arg2 = (RCF::_SwigCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  arg2 = *(RCF::_SwigCallback **)&jarg2; 
  {
    try 
    {
      (arg1)->_setCertificateValidationCallback(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1setSslImplementation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::SslImplementation arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  arg2 = (RCF::SslImplementation)jarg2; 
  {
    try 
    {
      (arg1)->setSslImplementation(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoChannel_1getSslImplementation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  RCF::SslImplementation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      result = (RCF::SslImplementation)((RCF::RcfProtoChannel const *)arg1)->getSslImplementation();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1RcfProtoChannel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::RcfProtoChannel *arg1 = (RCF::RcfProtoChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::RcfProtoChannel **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoSession_1_1GetRequestBufferLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoSession **)&jarg1; 
  {
    try 
    {
      result = (int)(arg1)->_GetRequestBufferLength();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoSession_1_1GetRequestBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoSession **)&jarg1; 
  {
    arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
    arg3 = (size_t) jenv->GetArrayLength(jarg2);
  }
  {
    try 
    {
      (arg1)->_GetRequestBuffer(arg2,arg3);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoSession_1_1SetResponseBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoSession **)&jarg1; 
  {
    arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
    arg3 = (size_t) jenv->GetArrayLength(jarg2);
  }
  {
    try 
    {
      (arg1)->_SetResponseBuffer(arg2,arg3);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoSession_1SetFailed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoSession **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try 
    {
      (arg1)->SetFailed((std::string const &)*arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoSession_1IsCanceled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoSession **)&jarg1; 
  {
    try 
    {
      result = (bool)((RCF::RcfProtoSession const *)arg1)->IsCanceled();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoSession_1_1Commit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoSession **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try 
    {
      (arg1)->_Commit((std::string const &)*arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoSession_1_1Commit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoSession **)&jarg1; 
  {
    try 
    {
      (arg1)->_Commit();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoSession_1_1GetRequestBuffer_1WithCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoSession **)&jarg1; 
  {
    try 
    {
      result = (arg1)->_GetRequestBuffer_WithCopy();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoSession_1_1SetResponseBuffer_1WithCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoSession **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try 
    {
      (arg1)->_SetResponseBuffer_WithCopy((std::string const &)*arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoSession_1getClientUsername(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  RCF::tstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoSession **)&jarg1; 
  {
    try 
    {
      result = (arg1)->getClientUsername();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoSession_1getTransportProtocol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  RCF::TransportProtocol result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoSession **)&jarg1; 
  {
    try 
    {
      result = (RCF::TransportProtocol)(arg1)->getTransportProtocol();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoSession_1getTransportType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  RCF::TransportType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoSession **)&jarg1; 
  {
    try 
    {
      result = (RCF::TransportType)(arg1)->getTransportType();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoSession_1getEnableCompression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoSession **)&jarg1; 
  {
    try 
    {
      result = (bool)(arg1)->getEnableCompression();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoSession_1getConnectionDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoSession **)&jarg1; 
  {
    try 
    {
      result = ((RCF::RcfProtoSession const *)arg1)->getConnectionDuration();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoSession_1getRemoteCallCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoSession **)&jarg1; 
  {
    try 
    {
      result = ((RCF::RcfProtoSession const *)arg1)->getRemoteCallCount();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoSession_1getTotalBytesReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  boost::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoSession **)&jarg1; 
  {
    try 
    {
      result = (boost::uint64_t)((RCF::RcfProtoSession const *)arg1)->getTotalBytesReceived();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoSession_1getTotalBytesSent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  boost::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoSession **)&jarg1; 
  {
    try 
    {
      result = (boost::uint64_t)((RCF::RcfProtoSession const *)arg1)->getTotalBytesSent();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1RcfProtoSession(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::RcfProtoSession *arg1 = (RCF::RcfProtoSession *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::RcfProtoSession **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1RcfProtoServer_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RCF::RcfProtoServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try 
    {
      result = (RCF::RcfProtoServer *)new RCF::RcfProtoServer();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::RcfProtoServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_new_1RcfProtoServer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::Endpoint *arg1 = 0 ;
  RCF::RcfProtoServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::Endpoint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RCF::Endpoint const & reference is null");
    return 0;
  } 
  {
    try 
    {
      result = (RCF::RcfProtoServer *)new RCF::RcfProtoServer((RCF::Endpoint const &)*arg1);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::RcfProtoServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_delete_1RcfProtoServer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  {
    try 
    {
      delete arg1;
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  {
    try 
    {
      (arg1)->start();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  {
    try 
    {
      (arg1)->stop();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1_1setCallbackTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::_SwigCallback *arg2 = (RCF::_SwigCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  arg2 = *(RCF::_SwigCallback **)&jarg2; 
  {
    try 
    {
      (arg1)->_setCallbackTable(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1setThreadPool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::ThreadPoolPtr arg2 ;
  RCF::ThreadPoolPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  argp2 = *(RCF::ThreadPoolPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try 
    {
      (arg1)->setThreadPool(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1getThreadPool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::ThreadPoolPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  {
    try 
    {
      result = (arg1)->getThreadPool();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::ThreadPoolPtr **)&jresult = result ? new RCF::ThreadPoolPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1addEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::Endpoint *arg2 = 0 ;
  RCF::ServerTransport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  arg2 = *(RCF::Endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RCF::Endpoint const & reference is null");
    return 0;
  } 
  {
    try 
    {
      result = (RCF::ServerTransport *) &(arg1)->addEndpoint((RCF::Endpoint const &)*arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::ServerTransport **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1setSupportedTransportProtocols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  std::vector< RCF::TransportProtocol > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  arg2 = *(std::vector< RCF::TransportProtocol > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RCF::TransportProtocol > const & reference is null");
    return ;
  } 
  {
    try 
    {
      (arg1)->setSupportedTransportProtocols((std::vector< RCF::TransportProtocol > const &)*arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1getSupportedTransportProtocols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  std::vector< RCF::TransportProtocol > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  {
    try 
    {
      result = (std::vector< RCF::TransportProtocol > *) &((RCF::RcfProtoServer const *)arg1)->getSupportedTransportProtocols();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(std::vector< RCF::TransportProtocol > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1setSessionTimeoutMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  boost::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  {
    try 
    {
      (arg1)->setSessionTimeoutMs(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1getSessionTimeoutMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  {
    try 
    {
      result = (boost::uint32_t)(arg1)->getSessionTimeoutMs();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1setSessionHarvestingIntervalMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  boost::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  arg2 = (boost::uint32_t)jarg2; 
  {
    try 
    {
      (arg1)->setSessionHarvestingIntervalMs(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1getSessionHarvestingIntervalMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  boost::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  {
    try 
    {
      result = (boost::uint32_t)(arg1)->getSessionHarvestingIntervalMs();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1setCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::CertificatePtr arg2 ;
  RCF::CertificatePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  argp2 = *(RCF::CertificatePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try 
    {
      (arg1)->setCertificate(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1getCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::CertificatePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  {
    try 
    {
      result = (arg1)->getCertificate();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::CertificatePtr **)&jresult = result ? new RCF::CertificatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1setOpenSslCipherSuite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try 
    {
      (arg1)->setOpenSslCipherSuite((std::string const &)*arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1getOpenSslCipherSuite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  {
    try 
    {
      result = ((RCF::RcfProtoServer const *)arg1)->getOpenSslCipherSuite();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1setCaCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::CertificatePtr arg2 ;
  RCF::CertificatePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  argp2 = *(RCF::CertificatePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try 
    {
      (arg1)->setCaCertificate(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1getCaCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::CertificatePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  {
    try 
    {
      result = (arg1)->getCaCertificate();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  *(RCF::CertificatePtr **)&jresult = result ? new RCF::CertificatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1setEnableSchannelCertificateValidation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::tstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try 
    {
      (arg1)->setEnableSchannelCertificateValidation((RCF::tstring const &)*arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1getEnableSchannelCertificateValidation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::tstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  {
    try 
    {
      result = ((RCF::RcfProtoServer const *)arg1)->getEnableSchannelCertificateValidation();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1setSslImplementation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::SslImplementation arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  arg2 = (RCF::SslImplementation)jarg2; 
  {
    try 
    {
      (arg1)->setSslImplementation(arg2);
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_RcfProtoServer_1getSslImplementation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RCF::RcfProtoServer *arg1 = (RCF::RcfProtoServer *) 0 ;
  RCF::SslImplementation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCF::RcfProtoServer **)&jarg1; 
  {
    try 
    {
      result = (RCF::SslImplementation)((RCF::RcfProtoServer const *)arg1)->getSslImplementation();
    } 
    catch(const RCF::Exception & e)
    {
      std::string msg = e.getErrorString();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
    catch (std::exception & e) 
    {
      std::string msg = e.what();
      jclass excType = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(excType, msg.c_str());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_LogToStdout_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(RCF::LogTarget **)&baseptr = *(RCF::LogToStdout **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_LogToDebugWindow_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(RCF::LogTarget **)&baseptr = *(RCF::LogToDebugWindow **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_LogToEventLog_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(RCF::LogTarget **)&baseptr = *(RCF::LogToEventLog **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_LogToFile_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(RCF::LogTarget **)&baseptr = *(RCF::LogToFile **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_PemCertificate_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RCF::PemCertificate > *argp1;
    boost::shared_ptr< RCF::Certificate > result;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RCF::PemCertificate > **)&jarg1;
    *(boost::shared_ptr< RCF::Certificate > **)&baseptr = argp1 ? new boost::shared_ptr< RCF::Certificate >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_X509Certificate_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RCF::X509Certificate > *argp1;
    boost::shared_ptr< RCF::Certificate > result;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RCF::X509Certificate > **)&jarg1;
    *(boost::shared_ptr< RCF::Certificate > **)&baseptr = argp1 ? new boost::shared_ptr< RCF::Certificate >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_Win32Certificate_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RCF::Win32Certificate > *argp1;
    boost::shared_ptr< RCF::Certificate > result;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RCF::Win32Certificate > **)&jarg1;
    *(boost::shared_ptr< RCF::Certificate > **)&baseptr = argp1 ? new boost::shared_ptr< RCF::Certificate >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_PfxCertificate_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RCF::PfxCertificate > *argp1;
    boost::shared_ptr< RCF::Win32Certificate > result;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RCF::PfxCertificate > **)&jarg1;
    *(boost::shared_ptr< RCF::Win32Certificate > **)&baseptr = argp1 ? new boost::shared_ptr< RCF::Win32Certificate >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_StoreCertificate_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RCF::StoreCertificate > *argp1;
    boost::shared_ptr< RCF::Win32Certificate > result;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RCF::StoreCertificate > **)&jarg1;
    *(boost::shared_ptr< RCF::Win32Certificate > **)&baseptr = argp1 ? new boost::shared_ptr< RCF::Win32Certificate >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_TcpEndpoint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(RCF::Endpoint **)&baseptr = *(RCF::TcpEndpoint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_Win32NamedPipeEndpoint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(RCF::Endpoint **)&baseptr = *(RCF::Win32NamedPipeEndpoint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_UnixLocalEndpoint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(RCF::Endpoint **)&baseptr = *(RCF::UnixLocalEndpoint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_HttpEndpoint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(RCF::TcpEndpoint **)&baseptr = *(RCF::HttpEndpoint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_HttpsEndpoint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(RCF::TcpEndpoint **)&baseptr = *(RCF::HttpsEndpoint **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_com_deltavsoft_rcfproto_RCFProtoJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[3] = {
    {
      "SwigDirector__SwigCallback_Run", "(Lcom/deltavsoft/rcfproto/_SwigCallback;)V" 
    },
    {
      "SwigDirector__SwigCallback_ProtoRpcBegin", "(Lcom/deltavsoft/rcfproto/_SwigCallback;JJJLjava/lang/String;I)V" 
    },
    {
      "SwigDirector__SwigCallback_ValidateCertificate", "(Lcom/deltavsoft/rcfproto/_SwigCallback;J)Z" 
    }
  };
  Swig::jclass_RCFProtoJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_RCFProtoJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

